!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--g&&0===m&&_()}(e,n),t&&t(e,n)};var n,r=!0,a="26f576691c9e258d07ac",o=1e4,i={},u=[],c=[];function f(e){var t=A[e];if(!t)return I;var r=function(r){return t.hot.active?(A[r]?-1===A[r].parents.indexOf(e)&&A[r].parents.push(e):(u=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),u=[]),I(r)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return I[e]},set:function(t){I[e]=t}}};for(var o in I)Object.prototype.hasOwnProperty.call(I,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,a(o));return r.e=function(e){return"ready"===d&&s("prepare"),m++,I.e(e).then(t,function(e){throw t(),e});function t(){m--,"prepare"===d&&(y[e]||E(e),0===m&&0===g&&_())}},r.t=function(e,t){return 1&t&&(e=r(e)),I.t(e,-2&t)},r}var l=[],d="idle";function s(e){d=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var p,h,v,g=0,m=0,y={},b={},w={};function x(e){return+e+""===e?+e:e}function M(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return r=e,s("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=I.p+""+a+".hot-update.json";r.open("GET",o,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}(o).then(function(e){if(!e)return s("idle"),null;b={},y={},w=e.c,v=e.h,s("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});h={};return E(0),"prepare"===d&&0===m&&0===g&&_(),t})}function E(e){w[e]?(b[e]=!0,g++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=I.p+""+e+"."+a+".hot-update.js",t.appendChild(n)}(e)):y[e]=!0}function _(){s("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return j(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(x(n));e.resolve(t)}}function j(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var n,r,o,c,f;function l(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var a=r.pop(),o=a.id,i=a.chain;if((c=A[o])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:i,moduleId:o};for(var u=0;u<c.parents.length;u++){var f=c.parents[u],l=A[f];if(l){if(l.hot._declinedDependencies[o])return{type:"declined",chain:i.concat([f]),moduleId:o,parentId:f};-1===t.indexOf(f)&&(l.hot._acceptedDependencies[o]?(n[f]||(n[f]=[]),p(n[f],[o])):(delete n[f],t.push(f),r.push({chain:i.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var g={},m=[],y={},b=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var M in h)if(Object.prototype.hasOwnProperty.call(h,M)){var E;f=x(M);var _=!1,j=!1,O=!1,D="";switch((E=h[M]?l(f):{type:"disposed",moduleId:M}).chain&&(D="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(_=new Error("Aborted because of self decline: "+E.moduleId+D));break;case"declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(_=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+D));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(E),t.ignoreUnaccepted||(_=new Error("Aborted because "+f+" is not accepted"+D));break;case"accepted":t.onAccepted&&t.onAccepted(E),j=!0;break;case"disposed":t.onDisposed&&t.onDisposed(E),O=!0;break;default:throw new Error("Unexception type "+E.type)}if(_)return s("abort"),Promise.reject(_);if(j)for(f in y[f]=h[f],p(m,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,f)&&(g[f]||(g[f]=[]),p(g[f],E.outdatedDependencies[f]));O&&(p(m,[E.moduleId]),y[f]=b)}var B,L=[];for(r=0;r<m.length;r++)f=m[r],A[f]&&A[f].hot._selfAccepted&&L.push({module:f,errorHandler:A[f].hot._selfAccepted});s("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var C,k,P=m.slice();P.length>0;)if(f=P.pop(),c=A[f]){var S={},T=c.hot._disposeHandlers;for(o=0;o<T.length;o++)(n=T[o])(S);for(i[f]=S,c.hot.active=!1,delete A[f],delete g[f],o=0;o<c.children.length;o++){var R=A[c.children[o]];R&&((B=R.parents.indexOf(f))>=0&&R.parents.splice(B,1))}}for(f in g)if(Object.prototype.hasOwnProperty.call(g,f)&&(c=A[f]))for(k=g[f],o=0;o<k.length;o++)C=k[o],(B=c.children.indexOf(C))>=0&&c.children.splice(B,1);for(f in s("apply"),a=v,y)Object.prototype.hasOwnProperty.call(y,f)&&(e[f]=y[f]);var H=null;for(f in g)if(Object.prototype.hasOwnProperty.call(g,f)&&(c=A[f])){k=g[f];var U=[];for(r=0;r<k.length;r++)if(C=k[r],n=c.hot._acceptedDependencies[C]){if(-1!==U.indexOf(n))continue;U.push(n)}for(r=0;r<U.length;r++){n=U[r];try{n(k)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:f,dependencyId:k[r],error:e}),t.ignoreErrored||H||(H=e)}}}for(r=0;r<L.length;r++){var z=L[r];f=z.module,u=[f];try{I(f)}catch(e){if("function"==typeof z.errorHandler)try{z.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:f,error:n,originalError:e}),t.ignoreErrored||H||(H=n),H||(H=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:f,error:e}),t.ignoreErrored||H||(H=e)}}return H?(s("fail"),Promise.reject(H)):(s("idle"),new Promise(function(e){e(m)}))}var A={};function I(t){if(A[t])return A[t].exports;var r=A[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:M,apply:j,status:function(e){if(!e)return d;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:i[e]};return n=void 0,t}(t),parents:(c=u,u=[],c),children:[]};return e[t].call(r.exports,r,r.exports,f(t)),r.l=!0,r.exports}I.m=e,I.c=A,I.d=function(e,t,n){I.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},I.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},I.t=function(e,t){if(1&t&&(e=I(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(I.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)I.d(n,r,function(t){return e[t]}.bind(null,r));return n},I.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(t,"a",t),t},I.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},I.p="",I.h=function(){return a},f(7)(I.s=7)}([function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}Object.defineProperty(t,"__esModule",{value:!0});var a={paramsExport:function(e){var t=this;""!==e&&this.log(e);for(var n=arguments.length,r=Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];r.forEach(function(e){t.log(e)})},log:function(e){console.log(e)}};t.default={fatal:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];a.paramsExport.apply(a,["【FATAL】"].concat(r(t)))},error:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];a.paramsExport.apply(a,["【ERROR】"].concat(r(t)))},warn:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];a.paramsExport.apply(a,["【WARN】"].concat(r(t)))},info:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];a.paramsExport.apply(a,[""].concat(r(t)))},debug:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];a.paramsExport.apply(a,[""].concat(r(t)))},trace:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];a.paramsExport.apply(a,[""].concat(r(t)))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(11)),a=l(n(13)),o=l(n(16)),i=l(n(19)),u=l(n(6)),c=l(n(0)),f=l(n(22));function l(e){return e&&e.__esModule?e:{default:e}}var d={init:function(){(0,r.default)();var e=(0,a.default)(),t=(0,o.default)(),n=(0,i.default)();c.default.info("[G] init all events listener [√]"),this.imgBox=document.getElementById("imgBox"),this.monitorList=[e,t,n],this.storage={data:null,width:null,height:null},c.default.info("[G] init Global storage [√]");var u=new Image;u.src=f.default,document.getElementById("titleExp1").appendChild(u)},getColorData:function(){return{data:this.storage.compressedArray,width:this.storage.width,height:this.storage.height}},setColorData:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];var t=this.storage,n=t.width,r=t.height,a=u.default.convertArrayToCanvas(e,n,r),o=u.default.convertCanvasToBase64(a,"jpeg");c.default.info("[G] transform data into base64 [√]"),this.imgBox.setAttribute("src",o),c.default.info("[G] update DOM [√]")},update:function(){var e=u.default.convertImageToCanvas(this.imgBox),t=e.width,n=e.height,r=u.default.convertCanvasToImageData(e,0,0,t,n);c.default.info("[G] get imageData from DOM [√]");var a=u.default.decolorization(r),o=u.default.compressImageData(a);c.default.info("[G] decolor and compress imageData [√]"),this.storage=Object.freeze({imageData:r,decoloredImageData:a,compressedArray:o,width:t,height:n}),c.default.info("[G] update Global storage [√]"),this.monitorList.map(function(e){return e()}),c.default.info("[G] clear all local storage [√]")}};t.default=d},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,"body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nheader {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 500px;\r\n  padding: 30px 0 70px 0;\r\n  margin: 0 0 40px 0;\r\n  background-color: rgba(0, 0, 0, .04);\r\n}\r\n\r\nheader h1 {\r\n  margin-bottom: 10px;\r\n}\r\n\r\nheader p {\r\n  margin: 0;\r\n  font-size: .7rem;\r\n  letter-spacing: 3px;\r\n}\r\n\r\n.title {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.title img {\r\n  width: 1040px;\r\n}\r\n",""])},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,".exp {\r\n  min-width: 1000px;\r\n  margin-bottom: 500px;\r\n}\r\n\r\n#imageDisplayAndConvert {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.fileBox {\r\n  position: relative;\r\n  display: flex;\r\n  width: 450px;\r\n  height: 450px;\r\n  margin-left: -50px;\r\n  margin-right: 50px;\r\n  box-sizing: border-box;\r\n  border: 1px gray solid;\r\n  border-radius: 20px;\r\n}\r\n\r\n.fileBox input[type=file]{\r\n  opacity: 0;\r\n}\r\n\r\n.fileBox .inputBox {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n#inputHelper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n#inputHelper p {\r\n  font-size: .7rem;\r\n  line-height: .1rem;\r\n  color: rgba(0, 0, 0, .6);\r\n}\r\n\r\n#inputHelper p:first-of-type {\r\n  font-size: 1.5rem;\r\n  font-weight: 100;\r\n}\r\n\r\n#imgContainer {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 5%;\r\n  bottom: 5%;\r\n  left: 5%;\r\n  right: 5%;\r\n  z-index: -1;\r\n  background-color: rgba(0, 0, 0, .07);\r\n}\r\n\r\n#download, #restore {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 120px;\r\n  height: 40px;\r\n  margin-top: 40px;\r\n  border-radius: 40px;\r\n  text-decoration: none;\r\n  font-size: .7rem;\r\n}\r\n\r\n.roundBtn {\r\n  width: 24px;\r\n  height: 24px;\r\n  padding: 0;\r\n  margin-right: 5px;\r\n  border-radius: 100%;\r\n}\r\n\r\n.hide {\r\n  opacity: 0;\r\n}\r\n\r\n.annotation {\r\n  transform: scale(.8) translateX(-10%);\r\n  color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\nbutton {\r\n  margin: 0 0 0 2px;\r\n  padding: 5px 13px;\r\n  border: transparent;\r\n  border-radius: 13px;\r\n  outline: none;\r\n  background-color: rgba(0, 0, 0, .09);\r\n}\r\n\r\nbutton:hover {\r\n  background-color: rgba(0, 0, 0, .14);\r\n}\r\n\r\n#rename {\r\n  outline: none;\r\n  border: none;\r\n  border-bottom: 1px black solid;\r\n}\r\n\r\n.options {\r\n  margin-top: 20px;\r\n  font-size: .8rem;\r\n  color: rgba(0, 0, 0, 0.7);\r\n}\r\n\r\n.disable {\r\n  background-color: rgba(255, 160, 160, 0.685);\r\n}\r\n\r\n.enable {\r\n  background-color: rgba(193, 255, 241, 0.795);\r\n}",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var a=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),o=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(o).concat([a]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},a=0;a<this.length;a++){var o=this[a][0];"number"==typeof o&&(r[o]=!0)}for(a=0;a<e.length;a++){var i=e[a];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){var r={},a=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),o=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),i=null,u=0,c=[],f=n(9);function l(e,t){for(var n=0;n<e.length;n++){var a=e[n],o=r[a.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](a.parts[i]);for(;i<a.parts.length;i++)o.parts.push(g(a.parts[i],t))}else{var u=[];for(i=0;i<a.parts.length;i++)u.push(g(a.parts[i],t));r[a.id]={id:a.id,refs:1,parts:u}}}}function d(e,t){for(var n=[],r={},a=0;a<e.length;a++){var o=e[a],i=t.base?o[0]+t.base:o[0],u={css:o[1],media:o[2],sourceMap:o[3]};r[i]?r[i].parts.push(u):n.push(r[i]={id:i,parts:[u]})}return n}function s(e,t){var n=o(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=o(e.insertAt.before,n);n.insertBefore(t,a)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function h(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),s(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,a,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var c=u++;n=i||(i=h(t)),r=y.bind(null,n,c,!1),a=y.bind(null,n,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),s(e,t),t}(t),r=function(e,t,n){var r=n.css,a=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||o)&&(r=f(r));a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var i=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(i),u&&URL.revokeObjectURL(u)}.bind(null,n,t),a=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),a=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return l(n,t),function(e){for(var a=[],o=0;o<n.length;o++){var i=n[o];(u=r[i.id]).refs--,a.push(u)}e&&l(d(e,t),t);for(o=0;o<a.length;o++){var u;if(0===(u=a[o]).refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete r[u.id]}}}};var m=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function y(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=m(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(a)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=function(e){return e&&e.__esModule?e:{default:e}}(n(12));var o=["png","jpeg","bmp","dib"],i={isSupportedFile:function(e){if(!e)return!1;var t=e.type.split("/"),n=r(t,2),a=n[0],i=void 0===a?"unknown":a,u=n[1],c=void 0===u?"png":u;return"image"===i&&-1!==o.indexOf(c)},convertFileToBase64:function(e){return new Promise(function(t,n){var r=new FileReader(e);r.onload=function(e){var n=e.target.result;t(n)},r.onerror=function(e){n(e)},r.readAsDataURL(e)})},convertImageToCanvas:function(e){var t=document.createElement("canvas");return t.width=e.naturalWidth,t.height=e.naturalHeight,t.getContext("2d").drawImage(e,0,0),t},convertArrayToCanvas:function(e,t,n){var r=document.createElement("canvas"),a=r.getContext("2d");r.setAttribute("width",t),r.setAttribute("height",n);for(var o=0;o<n;o+=1)for(var i=0;i<t;i+=1){var u=o*t+i;a.fillStyle="rgb("+e[u]+","+e[u]+","+e[u]+")",a.fillRect(i,o,1,1)}return r},convertCanvasToBase64:function(e,t){var n="image/"+t;return"bmp"===t?a.default.convertCanvasToBase64(e):e.toDataURL(n)},convertCanvasToImageData:function(e,t,n,r,a){return e.getContext("2d").getImageData(t,n,r,a)},createObjectURL:function(e){return window.URL.createObjectURL(e)},decolorization:function(e){for(var t=e.data,n=t.length,r=0;r<n;r+=4){var a=(t[r]+t[r+1]+t[r+2])/3;t[r]=a,t[r+1]=a,t[r+2]=a}return e},compressImageData:function(e){for(var t=e.data,n=t.length,r=[],a=0;a<n;a+=4)r.push(t[a]);return r}};t.default=i},function(e,t,n){"use strict";n(8),n(10),function(e){return e&&e.__esModule?e:{default:e}}(n(1)).default.init()},function(e,t,n){var r=n(2);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0},o=n(5)(r,a);r.locals&&(e.exports=r.locals),e.hot.accept(2,function(){var t=n(2);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}),e.hot.dispose(function(){o()})},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var a,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(a=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")})}},function(e,t,n){var r=n(3);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0},o=n(5)(r,a);r.locals&&(e.exports=r.locals),e.hot.accept(3,function(){var t=n(3);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}),e.hot.dispose(function(){o()})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=document.getElementById("exp1"),t=document.getElementById("inputBox"),n=document.getElementById("formatSelection"),r=e.getElementsByTagName("input")[0],o=document.getElementById("rename"),i=document.getElementById("download");c.init(),r.addEventListener("change",function(e){if(c.state===u.wait){e.stopPropagation();var t=e.target,n=t.files;a.default.info("file changed by selecting."),c.validateAndDisplay(n[0])}}),t.addEventListener("dragover",function(e){e.stopPropagation(),e.preventDefault()}),t.addEventListener("drop",function(e){if(c.state===u.wait){e.stopPropagation(),e.preventDefault();var t=e.dataTransfer.files[0];a.default.info("file changed by dragging."),c.validateAndDisplay(t)}}),n.addEventListener("change",function(){var e=n[n.selectedIndex].value;"none"!==e&&c.convertImage(e)}),o.addEventListener("change",function(){if(c.state!==u.wait){var e=o.value;c.rename(e)}}),i.addEventListener("click",function(e){c.state===u.wait&&(e.stopPropagation(),e.preventDefault())})};var r=i(n(6)),a=i(n(0)),o=i(n(1));function i(e){return e&&e.__esModule?e:{default:e}}var u={wait:0,ready:1},c={init:function(){this.imgBox=document.getElementById("imgBox"),this.imgContainer=document.getElementById("imgContainer"),this.downloadBtn=document.getElementById("download"),this.inputHelper=document.getElementById("inputHelper"),this.nameInput=document.getElementById("rename"),Reflect.defineProperty(c,"state",{get:function(){return this._state},set:function(e){this._state=e,this.checkDownloadBtn(e)}}),this.state=u.wait},validateAndDisplay:function(e){var t=this;if(r.default.isSupportedFile(e)){var n=this.getElementStyle(this.imgContainer),i={width:n.width,height:n.height},u=r.default.createObjectURL(e),c=e.name;this.resizeImage(i,u).then(function(e){t.hideHelper(),t.setName(c),t.imgBox.setAttribute("width",e.width),t.imgBox.setAttribute("height",e.height),t.imgBox.setAttribute("src",u),o.default.update()})}else a.default.error("Please upload an image in supported format.")},convertImage:function(e){this.state=u.wait;var t=r.default.convertImageToCanvas(this.imgBox),n=r.default.convertCanvasToBase64(t,e);this.downloadBtn.setAttribute("href",n),a.default.info("convert file format to: "+e),this.state=u.ready},getElementStyle:function(e){return window.getComputedStyle?window.getComputedStyle(e):e.currentStyle},resizeImage:function(e,t){return new Promise(function(n,r){var o=new Image,i=parseInt(e.width,10),u=parseInt(e.height,10),c=null,f=null;o.onload=function(){i/u>o.naturalWidth/o.naturalHeight?(f=u,c=o.naturalWidth/(o.naturalHeight/f)):(c=i,f=o.naturalHeight/(o.naturalWidth/c)),a.default.info("image resized successfully. width: "+c+"px  height: "+f+"px"),n({width:c,height:f})},o.onerror=function(e){a.default.error("image resize failure."),r(e)},o.src=t})},hideHelper:function(){this.inputHelper.classList.add("hide")},setName:function(e){var t=e.split(".")[0];this.nameInput.value=t,this.downloadBtn.setAttribute("download",t),a.default.info("init file name to: "+t)},rename:function(e){this.downloadBtn.setAttribute("download",e),a.default.info("reset file name to: "+e)},getName:function(){return this.rename.value},checkDownloadBtn:function(e){e===u.ready?this.canDownload():e===u.wait&&this.cannotDownload()},canDownload:function(){this.downloadBtn.classList.remove("disable"),this.downloadBtn.classList.add("enable")},cannotDownload:function(){this.downloadBtn.classList.remove("enable"),this.downloadBtn.classList.add("disable")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(0));var a={convertCanvasToImageData:function(e){var t=e.width,n=e.height;return e.getContext("2d").getImageData(0,0,t,n)},convertCanvasToBitMap:function(e){var t=e.width,n=e.height,r=t*n*3,a=r+54,o=[66,77,255&a,a>>8&255,a>>16&255,a>>24&255,0,0,0,0,54,0,0,0],i=[40,0,0,0,255&t,t>>8&255,t>>16&255,t>>24&255,255&n,n>>8&255,n>>16&255,n>>24&255,1,0,24,0,0,0,0,0,255&r,r>>8&255,r>>16&255,r>>24&255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],u=(4-3*t%4)%4,c=e.data,f="",l=t<<2,d=n,s=String.fromCharCode;do{for(var p=l*(d-1),h="",v=0;v<t;v+=1){var g=v<<2;h+=s(c[p+g+2])+s(c[p+g+1])+s(c[p+g])}for(var m=0;m<u;m+=1)h+=String.fromCharCode(0);f+=h,d-=1}while(d);var y=o.concat(i);return this.encodeData(y)+this.encodeData(f)},encodeData:function(e){window.btoa||r.default.error("btoa not defined");var t="";if("string"==typeof e)t=e;else for(var n=0;n<e.length;n+=1)t+=String.fromCharCode(e[n]);return window.btoa(t)},makeURI:function(e,t){return"data:"+t+";base64,"+e}},o={convertCanvasToBase64:function(e){var t=a.convertCanvasToImageData(e),n=a.convertCanvasToBitMap(t);return a.makeURI(n,"image/bmp")}};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=document.getElementById("fft"),t=document.getElementById("ifft"),n=u.none,a=null;return e.addEventListener("click",function(){switch(n){case u.none:if(void 0===(a=r.default.getColorData()).data)break;case u.itrans:var e=c.fft(a);a.data=e,n=u.trans;break;case u.trans:alert("Please run ifft before running fft");break;case u.err:}}),t.addEventListener("click",function(){switch(n){case u.none:case u.itrans:alert("Please run fft before running ifft");break;case u.trans:var e=c.ifft(a);a.data=e,n=u.itrans;break;case u.err:}}),function(){n=u.none}};var r=i(n(1)),a=i(n(14)),o=i(n(0));function i(e){return e&&e.__esModule?e:{default:e}}var u={none:0,trans:1,itrans:2,err:3},c={zoom:function(e,t){var n=Math.max.apply(Math,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e)),r=Math.log(.009*n+1);return e.map(function(e){var n=Math.log(.009*e+1);return Math.round(n*t/r)})},displace:function(e,t,n,r,a,o){var i=e.length/(a*o),u=t/a,c=n/o,f=[],l=[],d=function(e,n){var r=Math.floor(e/a),o=e-r*a,i=Math.floor(n/u);return(r*c+i)*t+(o*u+(n-i*u))};return r.forEach(function(e,t,n){-1!==e&&e!==t&&(f.push([t,e]),n[e]=-1)}),f.forEach(function(t){for(var n=t[0],r=t[1],a=0;a<i;a+=1){var o=d(n,a),u=d(r,a);l[o]=e[u],l[u]=e[o]}}),l},convertPluralToArray:function(e){return e.map(function(e){return e.magnitude2()})},fft:function(e){var t=e.data,n=e.width,i=e.height;o.default.info("","------- Start running fft2 -------");var u=a.default.fft2(t,n,i);o.default.info("calculate fft2 [√]");var f=c.convertPluralToArray(u),l=c.zoom(f,255);o.default.info("spectrum and zoom data [√]");var d=c.displace(l,n,i,[3,2,1,0],2,2);return o.default.info("mosaic image to center [√]"),r.default.setColorData(d,"tff"),o.default.info("-------- End running fft2 --------",""),u},ifft:function(e){var t=e.data,n=e.width,i=e.height;o.default.info("","------- Start running ifft2 -------");var u=a.default.ifft2(t,n,i);o.default.info("calculate ifft2 [√]");var c=a.default.regress(u,n,i);return o.default.info("regress data [√]"),r.default.setColorData(c,"ifft"),o.default.info("-------- End running ifft2 --------",""),c}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(15));var a=function(e,t,n,a,o,i){for(var u=[],c=0;c<n;c+=1){var f=e.slice(c*t,(c+1)*t);(i?r.default.ifft(f,a):r.default.fft(f)).forEach(function(e){return u.push(e)})}for(var l=u.length/n,d=0;d<l;d+=1){for(var s=[],p=0;p<n;p+=1)s.push(u[p*l+d]);for(var h=i?r.default.ifft(s,o):r.default.fft(s),v=h.length,g=0;g<v;g+=1)u[g*l+d]=h[g]}var m=a*n-a*o;return m>0&&u.splice(a*o,m),u};t.default={fft:r.default.fft,ifft:r.default.ifft,fft2:function(e,t,n){return a(e,t,n,0,0,!1)},ifft2:function(e,t,n){var o=r.default.completeLen(t),i=r.default.completeLen(n);return a(e,o,i,t,n,!0)},regress:function(e,t,n){var a=r.default.completeLen(t*n);return e.map(function(e){return e.regress(a)})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function e(t,n){var a=Object.create({mul:function(t){if("object"===(void 0===t?"undefined":r(t))){var n=this.real*t.real-this.imag*t.imag,a=this.real*t.imag+this.imag*t.real;return e(n,a)}return e(this.real*t,this.imag*t)},add:function(t){return e(this.real+t.real,this.imag+t.imag)},sub:function(t){return e(this.real-t.real,this.imag-t.imag)},magnitude:function(){return Math.pow(this.real,2)+Math.pow(this.imag,2)},magnitude2:function(){return Math.sqrt(this.magnitude())},conjugate:function(){return e(this.real,-this.imag)},regress:function(e){return this.real/e}});return a.real=t,a.imag=n,a},o={reverse:function(e){for(var t=e.length,n=Math.log(t)/Math.log(2),r=0,a=0,o=0;o<t;o+=1){r=o,a=0;for(var i=0;i<n;i+=1)a<<=1,a|=1&r,r>>=1;if(a>o){var u=[e[a],e[o]];e[o]=u[0],e[a]=u[1]}}return e},factorLut:function(e){if(!Reflect.has(this,"factorLut"+e)){for(var t=[],n=0;n<e;n+=1){var r=-n*Math.PI*2/e;t.push(a(Math.cos(r),Math.sin(r)))}this["factorLut"+e]=t}return this["factorLut"+e]},completeLen:function(e){var t=Math.log(e)/Math.log(2);return 1<<Math.ceil(t)},formatArray:function(e){for(var t=e.length,n=o.completeLen(t),i=[],u=0;u<t;u+=1)"object"===r(e[u])?i.push(e[u]):i.push(a(e[u],0));for(var c=t;c<n;c+=1)i.push(a(0,0));return i},butterfly:function(e){for(var t=e.length,n=Math.log(t)/Math.log(2),r=o.factorLut(t),a=o.reverse(e),i=0;i<n;i+=1)for(var u=2*(1<<i),c=0;c<t;c+=u)for(var f=0;f<u/2;f+=1){var l=c+f,d=c+f+u/2,s=a[d].mul(r[t/u*f]),p=a[l].add(s),h=a[l].sub(s);a[l]=p,a[d]=h}return a}};t.default={Complex:a,completeLen:o.completeLen,fft:function(e){var t=o.formatArray(e);return o.butterfly(t)},ifft:function(e,t){var n=e.map(function(e){return e.conjugate()});return(n=o.butterfly(n).map(function(e){return e.conjugate()})).slice(0,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=document.getElementById("dct"),t=document.getElementById("idct"),n=null,a=u.none;return e.addEventListener("click",function(){switch(a){case u.none:if(void 0===(n=r.default.getColorData()).data)break;case u.itrans:var e=c.dct(n);n.data=e,a=u.trans;break;case u.trans:alert("Please run idct before running dct");break;case u.err:}}),t.addEventListener("click",function(){switch(a){case u.none:case u.itrans:alert("Please run dct before running idct");break;case u.trans:var e=c.idct(n);n.data=e,a=u.itrans;break;case u.err:}}),function(){a=u.none}};var r=i(n(1)),a=i(n(17)),o=i(n(0));function i(e){return e&&e.__esModule?e:{default:e}}var u={none:0,trans:1,itrans:2,err:3},c={dct:function(e){var t=e.data,n=e.width,i=e.height;o.default.info("","------- Start running dct88 -------");var u=a.default.dct88(t,n,i);return o.default.info("calculate dct88 [√]"),r.default.setColorData(u,"dct"),o.default.info("-------- End running dct88 --------",""),u},idct:function(e){var t=e.data,n=e.width,i=e.height;o.default.info("","------- Start running idct88 -------");var u=a.default.idct88(t,n,i);return o.default.info("calculate idct88 [√]"),r.default.setColorData(u,"idct"),o.default.info("-------- End running idct88 --------",""),u}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(18));var a=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],o=function(e,t,n){for(var a=Math.ceil(t/8),o=a*Math.ceil(n/8),i=[],u=0;u<o;u+=1){for(var c=[],f=r.default.pos(u,a),l=f.x,d=f.y,s=0;s<64;s+=1){var p=r.default.pos(s,8),h=8*l+p.x,v=8*d+p.y;h>=t||v>=n?c.push(0):c.push(e[v*t+h])}i.push(c)}return i},i=function(e,t,n){var a=Math.ceil(t/8),o=[];return e.forEach(function(e,i){var u=r.default.pos(i,a),c=u.x,f=u.y;e.forEach(function(e,a){var i=r.default.pos(a,8),u=i.x,l=i.y;8*c+u<t&&8*f+l<n&&(o[(8*f+l)*t+(8*c+u)]=e)})}),o},u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return e.map(function(e,n){return t*Math.round(e/a[n])})},c=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return e.map(function(e,n){return e*a[n]/t})};t.default={dct88:function(e,t,n){var a=o(e,t,n).map(function(e){return r.default.dct(e,8,8)}).map(function(e){return u(e,2)});return i(a,t,n)},idct88:function(e,t,n){var a=o(e,t,n).map(function(e){return c(e,2)}).map(function(e){return r.default.idct(e,8,8)});return i(a,t,n)},dct:r.default.dct,idct:r.default.idct}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={cu:function(e,t){return 0===e&&0===t?.5:0===e||0===t?1/Math.sqrt(2):1},factorLut:function(e,t,n,r,a,o){var i=function(e,t,n){return Math.cos((e+.5)*t*Math.PI/n)};return i(n,a,e)*i(r,o,t)},pos:function(e,t){return{x:e%t,y:Math.floor(e/t)}},cal:function(e,t,n,a){var o=2/Math.sqrt(t*n);return e.map(function(i,u){var c=r.pos(u,t),f=c.x,l=c.y;return o*e.reduce(function(e,o,i){var u=r.pos(i,t),c=u.x,d=u.y;return!0===a?e+o*r.cu(c,d)*r.factorLut(t,n,f,l,c,d):e+o*r.cu(f,l)*r.factorLut(t,n,c,d,f,l)},0)})}};t.default={dct:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return r.cal(e,t,n,!1)},idct:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return r.cal(e,t,n,!0)},pos:r.pos}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=document.getElementById("wht"),t=document.getElementById("iwht"),n=document.getElementById("whtEnlarge"),a=document.getElementById("whtNarrow"),o=document.getElementById("whtScale"),i=null,f=255,l=u.none;return e.addEventListener("click",function(){switch(l){case u.none:if(void 0===(i=r.default.getColorData()).data)break;case u.itrans:var e=c.wht(i);c.whtZoom(e,255),i.data=e,l=u.trans;break;case u.trans:alert("Please run iwht before running wht");break;case u.err:}}),n.addEventListener("click",function(){switch(l){case u.none:alert("Please run wht before changing the scale value");break;case u.itrans:alert("Only available after running wht");break;case u.trans:c.whtZoom(i.data,f+=50),o.innerHTML=f;break;case u.err:}}),a.addEventListener("click",function(){switch(l){case u.none:alert("Please run wht before changing the scale value");break;case u.itrans:alert("Only available after running wht");break;case u.trans:c.whtZoom(i.data,f-=50),o.innerHTML=f;break;case u.err:}}),t.addEventListener("click",function(){switch(l){case u.none:case u.itrans:alert("Please run dct before running idct");break;case u.trans:var e=c.iwht();i=e,l=u.itrans;break;case u.err:}}),function(){l=u.none}};var r=i(n(1)),a=i(n(20)),o=i(n(0));function i(e){return e&&e.__esModule?e:{default:e}}var u={none:0,trans:1,itrans:2,err:3},c={zoom:function(e,t){var n=Math.max.apply(Math,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e)),r=Math.log(.009*n+1);return e.map(function(e){var n=Math.log(.009*e+1);return Math.round(n*t/r)})},wht:function(e){var t=e.data,n=e.width,r=e.height;o.default.info("","------- Start running wht88 -------");var i=a.default.wht88(t,n,r);return o.default.info("calculate wht88 [√]"),o.default.info("-------- End running wht88 --------",""),i},whtZoom:function(e,t){var n=e.map(function(e){return e*t});r.default.setColorData(n,"wht"),o.default.info("scale and display zoomed by: "+t+" [√]")},iwht:function(){o.default.info("","------- Start running iwht88 -------");var e=r.default.getColorData().data;return r.default.setColorData(e,"iwht"),o.default.info("","------- Start running iwht88 -------"),e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(21));var a={pos:function(e,t){return{x:e%t,y:Math.floor(e/t)}},formatArray:function(e,t,n,r){for(var a=[],o=0,i=Math.pow(r,2);o<i;o+=1){var u=this.pos(o,r),c=u.x,f=u.y;c>=t||f>=n?a.push(0):a.push(e[f*t+c])}return a},iformatArray:function(e,t,n,r){for(var a=[],o=0,i=Math.pow(r,2);o<i;o+=1){var u=this.pos(o,r),c=u.x,f=u.y;c<t&&f<n&&a.push(e[o])}return a},completeLen:function(e){var t=Math.log(e)/Math.log(2);return 1<<Math.ceil(t)}};t.default={wht88:function(e,t,n){var o=a.completeLen(Math.max(t,n)),i=a.formatArray(e,t,n,o),u=r.default.wht2(i).map(function(e){return Math.abs(e)});return a.iformatArray(u,t,n,o)},wht:r.default.wht,wht2:r.default.wht2}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=[1,1,1,-1],a={pos:function(e,t){return{x:e%t,y:Math.floor(e/t)}},grayCode:function(e){return e^e>>1},hadamard:function(e){var t=this,n=[[0,0],[0,1],[1,0],[1,1]];return function e(a){if(1===a[0])return a;var o=Math.sqrt(a.length),i=2*o,u=[];return a.forEach(function(e,a){for(var c=t.pos(a,o),f=c.x,l=c.y,d=r.map(function(t){return t*e/2}),s=0,p=n.length;s<p;s+=1){var h=2*f+n[s][0],v=2*l+n[s][1];u[v*i+h]=d[s]}}),e(u)}([e])},matrixMul:function(e,t,n,r,a){for(var o=[],i=0;i<n;i+=1)for(var u=0;u<a;u+=1){for(var c=0,f=0;f<t;f+=1){c+=e[i*t+f]*r[f*a+u]}o.push(c)}return{value:o,width:a,height:n}}};t.default={wht:function(e){var t=e.length,n=a.hadamard(t);return a.matrixMul(n,t,t,e,1,t).value.map(function(t){return t/e.length})},wht2:function(e){var t=Math.sqrt(e.length),n=a.hadamard(t),r=a.matrixMul(n,t,t,e,t);return a.matrixMul(r.value,r.width,r.height,n,t).value.map(function(t){return t/e.length})},pos:a.pos}},function(e,t,n){e.exports=n.p+"530fea9083cbfbd8e33d54a441052001.jpg"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--m&&0===g&&j()}(e,n),t&&t(e,n)};var n,r=!0,o="e1012f4bbf0b050d1ba9",i=1e4,a={},c=[],s=[];function d(e){var t=D[e];if(!t)return _;var r=function(r){return t.hot.active?(D[r]?-1===D[r].parents.indexOf(e)&&D[r].parents.push(e):(c=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),c=[]),_(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return _[e]},set:function(t){_[e]=t}}};for(var i in _)Object.prototype.hasOwnProperty.call(_,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===l&&f("prepare"),g++,_.e(e).then(t,function(e){throw t(),e});function t(){g--,"prepare"===l&&(y[e]||O(e),0===g&&0===m&&j())}},r.t=function(e,t){return 1&t&&(e=r(e)),_.t(e,-2&t)},r}var u=[],l="idle";function f(e){l=e;for(var t=0;t<u.length;t++)u[t].call(null,e)}var p,h,v,m=0,g=0,y={},b={},w={};function x(e){return+e+""===e?+e:e}function E(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return r=e,f("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=_.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}(i).then(function(e){if(!e)return f("idle"),null;b={},y={},w=e.c,v=e.h,f("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});h={};return O(0),"prepare"===l&&0===g&&0===m&&j(),t})}function O(e){w[e]?(b[e]=!0,m++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=_.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):y[e]=!0}function j(){f("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return I(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(x(n));e.resolve(t)}}function I(t){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var n,r,i,s,d;function u(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((s=D[i])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var c=0;c<s.parents.length;c++){var d=s.parents[c],u=D[d];if(u){if(u.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([d]),moduleId:i,parentId:d};-1===t.indexOf(d)&&(u.hot._acceptedDependencies[i]?(n[d]||(n[d]=[]),p(n[d],[i])):(delete n[d],t.push(d),r.push({chain:a.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var m={},g=[],y={},b=function(){console.warn("[HMR] unexpected require("+O.moduleId+") to disposed module")};for(var E in h)if(Object.prototype.hasOwnProperty.call(h,E)){var O;d=x(E);var j=!1,I=!1,B=!1,A="";switch((O=h[E]?u(d):{type:"disposed",moduleId:E}).chain&&(A="\nUpdate propagation: "+O.chain.join(" -> ")),O.type){case"self-declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(j=new Error("Aborted because of self decline: "+O.moduleId+A));break;case"declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+O.moduleId+" in "+O.parentId+A));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(O),t.ignoreUnaccepted||(j=new Error("Aborted because "+d+" is not accepted"+A));break;case"accepted":t.onAccepted&&t.onAccepted(O),I=!0;break;case"disposed":t.onDisposed&&t.onDisposed(O),B=!0;break;default:throw new Error("Unexception type "+O.type)}if(j)return f("abort"),Promise.reject(j);if(I)for(d in y[d]=h[d],p(g,O.outdatedModules),O.outdatedDependencies)Object.prototype.hasOwnProperty.call(O.outdatedDependencies,d)&&(m[d]||(m[d]=[]),p(m[d],O.outdatedDependencies[d]));B&&(p(g,[O.moduleId]),y[d]=b)}var C,L=[];for(r=0;r<g.length;r++)d=g[r],D[d]&&D[d].hot._selfAccepted&&L.push({module:d,errorHandler:D[d].hot._selfAccepted});f("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var S,R,U=g.slice();U.length>0;)if(d=U.pop(),s=D[d]){var H={},M=s.hot._disposeHandlers;for(i=0;i<M.length;i++)(n=M[i])(H);for(a[d]=H,s.hot.active=!1,delete D[d],delete m[d],i=0;i<s.children.length;i++){var P=D[s.children[i]];P&&((C=P.parents.indexOf(d))>=0&&P.parents.splice(C,1))}}for(d in m)if(Object.prototype.hasOwnProperty.call(m,d)&&(s=D[d]))for(R=m[d],i=0;i<R.length;i++)S=R[i],(C=s.children.indexOf(S))>=0&&s.children.splice(C,1);for(d in f("apply"),o=v,y)Object.prototype.hasOwnProperty.call(y,d)&&(e[d]=y[d]);var T=null;for(d in m)if(Object.prototype.hasOwnProperty.call(m,d)&&(s=D[d])){R=m[d];var k=[];for(r=0;r<R.length;r++)if(S=R[r],n=s.hot._acceptedDependencies[S]){if(-1!==k.indexOf(n))continue;k.push(n)}for(r=0;r<k.length;r++){n=k[r];try{n(R)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:d,dependencyId:R[r],error:e}),t.ignoreErrored||T||(T=e)}}}for(r=0;r<L.length;r++){var N=L[r];d=N.module,c=[d];try{_(d)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:n,originalError:e}),t.ignoreErrored||T||(T=n),T||(T=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:d,error:e}),t.ignoreErrored||T||(T=e)}}return T?(f("fail"),Promise.reject(T)):(f("idle"),new Promise(function(e){e(g)}))}var D={};function _(t){if(D[t])return D[t].exports;var r=D[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:E,apply:I,status:function(e){if(!e)return l;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var t=u.indexOf(e);t>=0&&u.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(s=c,c=[],s),children:[]};return e[t].call(r.exports,r,r.exports,d(t)),r.l=!0,r.exports}_.m=e,_.c=D,_.d=function(e,t,n){_.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},_.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},_.t=function(e,t){if(1&t&&(e=_(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(_.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)_.d(n,r,function(t){return e[t]}.bind(null,r));return n},_.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return _.d(t,"a",t),t},_.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},_.p="",_.h=function(){return o},d(2)(_.s=2)}([function(e,t,n){(e.exports=n(4)(!1)).push([e.i,"#exp {\r\n  width: 100%;\r\n  min-width: 1000px;\r\n}\r\n\r\n#imageDisplayAndConvert {\r\n  display: flex;\r\n  align-content: center;\r\n  justify-content: center;\r\n}\r\n\r\n.fileBox {\r\n  position: relative;\r\n  display: flex;\r\n  width: 450px;\r\n  height: 450px;\r\n  margin-left: -50px;\r\n  margin-right: 50px;\r\n  box-sizing: border-box;\r\n  border: 1px gray solid;\r\n  border-radius: 20px;\r\n}\r\n\r\n.fileBox input[type=file]{\r\n  opacity: 0;\r\n}\r\n\r\n.fileBox .inputBox {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n#inputHelper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n#inputHelper p {\r\n  font-size: .7rem;\r\n  line-height: .1rem;\r\n  color: rgba(0, 0, 0, .6);\r\n}\r\n\r\n#inputHelper p:first-of-type {\r\n  font-size: 1.5rem;\r\n  font-weight: 100;\r\n}\r\n\r\n#imgContainer {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 5%;\r\n  bottom: 5%;\r\n  left: 5%;\r\n  right: 5%;\r\n  z-index: -1;\r\n  background-color: rgba(0, 0, 0, .08);\r\n}\r\n\r\n#download {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 120px;\r\n  height: 40px;\r\n  border-radius: 40px;\r\n  text-decoration: none;\r\n  font-size: .7rem;\r\n}\r\n\r\n.hide {\r\n  opacity: 0;\r\n}\r\n\r\n.annotation {\r\n  transform: scale(.8) translateX(-10%);\r\n  color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n#rename {\r\n  outline: none;\r\n  border: none;\r\n  border-bottom: 1px black solid;\r\n}\r\n\r\n.options {\r\n  margin-top: 20px;\r\n  font-size: .8rem;\r\n  color: rgba(0, 0, 0, 0.7);\r\n}\r\n\r\n.disable {\r\n  background-color: rgba(255, 160, 160, 0.685);\r\n}\r\n\r\n.enable {\r\n  background-color: rgba(193, 255, 241, 0.795);\r\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={paramsExport:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;this.log(e+t),void 0!==r&&(r instanceof Object?Object.values(r).forEach(function(e){return n.log(e)}):r instanceof Array?r.forEach(function(e){return n.log(e)}):console.log(r))},log:function(e){console.log(e)}};t.default={fatal:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];r.paramsExport("【FATAL】",e,n)},error:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];r.paramsExport("【ERROR】",e,n)},warn:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];r.paramsExport("【WARN】",e,n)},info:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];r.paramsExport("",e,n)},debug:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];r.paramsExport("",e,n)},trace:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];r.paramsExport("",e,n)}}},function(e,t,n){"use strict";n(3),(0,function(e){return e&&e.__esModule?e:{default:e}}(n(7)).default)()},function(e,t,n){var r=n(0);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},i=n(5)(r,o);r.locals&&(e.exports=r.locals),e.hot.accept(0,function(){var t=n(0);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(t)}),e.hot.dispose(function(){i()})},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),a=null,c=0,s=[],d=n(6);function u(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(m(o.parts[a],t))}else{var c=[];for(a=0;a<o.parts.length;a++)c.push(m(o.parts[a],t));r[o.id]={id:o.id,refs:1,parts:c}}}}function l(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],c={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(c):n.push(r[a]={id:a,parts:[c]})}return n}function f(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),s.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertAt.before,n);n.insertBefore(t,o)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=s.indexOf(e);t>=0&&s.splice(t,1)}function h(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),f(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function m(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var s=c++;n=a||(a=h(t)),r=y.bind(null,n,s,!1),o=y.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),f(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),c=e.href;e.href=URL.createObjectURL(a),c&&URL.revokeObjectURL(c)}.bind(null,n,t),o=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=l(e,t);return u(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var a=n[i];(c=r[a.id]).refs--,o.push(c)}e&&u(l(e,t),t);for(i=0;i<o.length;i++){var c;if(0===(c=o[i]).refs){for(var s=0;s<c.parts.length;s++)c.parts[s]();delete r[c.id]}}}};var g=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function y(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=g(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=document.getElementById("exp1"),t=document.getElementById("inputBox"),n=document.getElementById("formatSelection"),r=e.getElementsByTagName("input")[0],i=document.getElementById("rename"),s=document.getElementById("download");c.init(),r.addEventListener("change",function(e){if(c.state===a.wait){e.stopPropagation();var t=e.target,n=t.files;o.default.info("file changed by selecting."),c.validateAndDisplay(n[0])}}),t.addEventListener("dragover",function(e){e.stopPropagation(),e.preventDefault()}),t.addEventListener("drop",function(e){if(c.state===a.wait){e.stopPropagation(),e.preventDefault();var t=e.dataTransfer.files[0];o.default.info("file changed by dragging."),c.validateAndDisplay(t)}}),n.addEventListener("change",function(){var e=n[n.selectedIndex].value;"none"!==e&&c.convertImage(e)}),i.addEventListener("change",function(){if(c.state!==a.wait){var e=i.value;c.rename(e)}}),s.addEventListener("click",function(e){c.state===a.wait&&(e.stopPropagation(),e.preventDefault())})};var r=i(n(8)),o=i(n(1));function i(e){return e&&e.__esModule?e:{default:e}}var a={wait:0,ready:1},c={init:function(){this.imgBox=document.getElementById("imgBox"),this.imgContainer=document.getElementById("imgContainer"),this.downloadBtn=document.getElementById("download"),this.inputHelper=document.getElementById("inputHelper"),this.nameInput=document.getElementById("rename"),Reflect.defineProperty(c,"state",{get:function(){return this._state},set:function(e){this._state=e,this.checkDownloadBtn(e)}}),this.state=a.wait},validateAndDisplay:function(e){var t=this;if(r.default.isSupportedFile(e)){var n=this.getElementStyle(this.imgContainer),i={width:n.width,height:n.height},a=r.default.createObjectURL(e),c=e.name;this.resizeImage(i,a).then(function(e){t.hideHelper(),t.setName(c),t.imgBox.setAttribute("width",e.width),t.imgBox.setAttribute("height",e.height),t.imgBox.setAttribute("src",a)})}else o.default.error("Please upload an image in supported format.")},convertImage:function(e){this.state=a.wait;var t=r.default.convertImageToCanvas(this.imgBox),n=r.default.convertCanvasToBase64(t,e);this.downloadBtn.setAttribute("href",n),o.default.info("convert file format to: "+e),this.state=a.ready},getElementStyle:function(e){return window.getComputedStyle?window.getComputedStyle(e):e.currentStyle},resizeImage:function(e,t){return new Promise(function(n,r){var i=new Image,a=parseInt(e.width,10),c=parseInt(e.height,10),s=null,d=null;i.onload=function(){a/c>i.naturalWidth/i.naturalHeight?(d=c,s=i.naturalWidth/(i.naturalHeight/d)):(s=a,d=i.naturalHeight/(i.naturalWidth/s)),o.default.info("image resized successfully. width: "+s+"px  height: "+d+"px"),n({width:s,height:d})},i.onerror=function(e){o.default.error("image resize failure."),r(e)},i.src=t})},hideHelper:function(){this.inputHelper.classList.add("hide"),o.default.info("hide upload helper")},setName:function(e){var t=e.split(".")[0];this.nameInput.value=t,this.downloadBtn.setAttribute("download",t),o.default.info("init file name to: "+t)},rename:function(e){this.downloadBtn.setAttribute("download",e),o.default.info("reset file name to: "+e)},getName:function(){return this.rename.value},checkDownloadBtn:function(e){e===a.ready?this.canDownload():e===a.wait&&this.cannotDownload()},canDownload:function(){this.downloadBtn.classList.remove("disable"),this.downloadBtn.classList.add("enable"),o.default.info("download button abled")},cannotDownload:function(){this.downloadBtn.classList.remove("enable"),this.downloadBtn.classList.add("disable"),o.default.info("download button disabled")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&c.return&&c.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=i(n(9));i(n(1));function i(e){return e&&e.__esModule?e:{default:e}}var a=["png","jpeg","bmp"],c={isSupportedFile:function(e){if(!e)return!1;var t=e.type.split("/"),n=r(t,2),o=n[0],i=void 0===o?"unknown":o,c=n[1],s=void 0===c?"png":c;return"image"===i&&-1!==a.indexOf(s)},convertFileToBase64:function(e){return new Promise(function(t,n){var r=new FileReader(e);r.onload=function(e){var n=e.target.result;t(n)},r.onerror=function(e){n(e)},r.readAsDataURL(e)})},convertImageToCanvas:function(e){var t=document.createElement("canvas");return t.width=e.naturalWidth,t.height=e.naturalHeight,t.getContext("2d").drawImage(e,0,0),t},convertCanvasToBase64:function(e,t){var n="image/"+t;return"bmp"===t?o.default.convertCanvasToBase64(e):e.toDataURL(n)},createObjectURL:function(e){return window.URL.createObjectURL(e)}};t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));var o={convertCanvasToImageData:function(e){var t=e.width,n=e.height;return e.getContext("2d").getImageData(0,0,t,n)},convertCanvasToBitMap:function(e){var t=e.width,n=e.height,r=t*n*3,o=r+54,i=[66,77,255&o,o>>8&255,o>>16&255,o>>24&255,0,0,0,0,54,0,0,0],a=[40,0,0,0,255&t,t>>8&255,t>>16&255,t>>24&255,255&n,n>>8&255,n>>16&255,n>>24&255,1,0,24,0,0,0,0,0,255&r,r>>8&255,r>>16&255,r>>24&255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],c=(4-3*t%4)%4,s=e.data,d="",u=t<<2,l=n,f=String.fromCharCode;do{for(var p=u*(l-1),h="",v=0;v<t;v+=1){var m=v<<2;h+=f(s[p+m+2])+f(s[p+m+1])+f(s[p+m])}for(var g=0;g<c;g+=1)h+=String.fromCharCode(0);d+=h,l-=1}while(l);var y=i.concat(a);return this.encodeData(y)+this.encodeData(d)},encodeData:function(e){window.btoa||r.default.error("btoa not defined");var t="";if("string"==typeof e)t=e;else for(var n=0;n<e.length;n+=1)t+=String.fromCharCode(e[n]);return window.btoa(t)},makeURI:function(e,t){return"data:"+t+";base64,"+e}},i={convertCanvasToBase64:function(e){var t=o.convertCanvasToImageData(e),n=o.convertCanvasToBitMap(t);return o.makeURI(n,"image/bmp")}};t.default=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
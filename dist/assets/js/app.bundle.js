!function(t){var e=this.webpackHotUpdate;this.webpackHotUpdate=function(t,n){!function(t,e){if(!b[t]||!w[t])return;for(var n in w[t]=!1,e)Object.prototype.hasOwnProperty.call(e,n)&&(g[n]=e[n]);0==--p&&0===m&&M()}(t,n),e&&e(t,n)};var n,r=!0,a="7d3e98439cc268ed0c45",i=1e4,o={},u=[],s=[];function c(t){var e=B[t];if(!e)return P;var r=function(r){return e.hot.active?(B[r]?-1===B[r].parents.indexOf(t)&&B[r].parents.push(t):(u=[t],n=r),-1===e.children.indexOf(r)&&e.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+t),u=[]),P(r)},a=function(t){return{configurable:!0,enumerable:!0,get:function(){return P[t]},set:function(e){P[t]=e}}};for(var i in P)Object.prototype.hasOwnProperty.call(P,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,a(i));return r.e=function(t){return"ready"===d&&f("prepare"),m++,P.e(t).then(e,function(t){throw e(),t});function e(){m--,"prepare"===d&&(y[t]||E(t),0===m&&0===p&&M())}},r.t=function(t,e){return 1&e&&(t=r(t)),P.t(t,-2&e)},r}var l=[],d="idle";function f(t){d=t;for(var e=0;e<l.length;e++)l[e].call(null,t)}var h,g,v,p=0,m=0,y={},w={},b={};function x(t){return+t+""===t?+t:t}function I(t){if("idle"!==d)throw new Error("check() is only allowed in idle status");return r=t,f("check"),function(t){return t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=P.p+""+a+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(t){return n(t)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(t){return void n(t)}e(t)}}})}(i).then(function(t){if(!t)return f("idle"),null;w={},y={},b=t.c,v=t.h,f("prepare");var e=new Promise(function(t,e){h={resolve:t,reject:e}});g={};return E(0),"prepare"===d&&0===m&&0===p&&M(),e})}function E(t){b[t]?(w[t]=!0,p++,function(t){var e=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=P.p+""+t+"."+a+".hot-update.js",e.appendChild(n)}(t)):y[t]=!0}function M(){f("ready");var t=h;if(h=null,t)if(r)Promise.resolve().then(function(){return C(r)}).then(function(e){t.resolve(e)},function(e){t.reject(e)});else{var e=[];for(var n in g)Object.prototype.hasOwnProperty.call(g,n)&&e.push(x(n));t.resolve(e)}}function C(e){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var n,r,i,s,c;function l(t){for(var e=[t],n={},r=e.slice().map(function(t){return{chain:[t],id:t}});r.length>0;){var a=r.pop(),i=a.id,o=a.chain;if((s=B[i])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:o,moduleId:i};for(var u=0;u<s.parents.length;u++){var c=s.parents[u],l=B[c];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:o.concat([c]),moduleId:i,parentId:c};-1===e.indexOf(c)&&(l.hot._acceptedDependencies[i]?(n[c]||(n[c]=[]),h(n[c],[i])):(delete n[c],e.push(c),r.push({chain:o.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:n}}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];-1===t.indexOf(r)&&t.push(r)}}e=e||{};var p={},m=[],y={},w=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var I in g)if(Object.prototype.hasOwnProperty.call(g,I)){var E;c=x(I);var M=!1,C=!1,D=!1,L="";switch((E=g[I]?l(c):{type:"disposed",moduleId:I}).chain&&(L="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":e.onDeclined&&e.onDeclined(E),e.ignoreDeclined||(M=new Error("Aborted because of self decline: "+E.moduleId+L));break;case"declined":e.onDeclined&&e.onDeclined(E),e.ignoreDeclined||(M=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+L));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(E),e.ignoreUnaccepted||(M=new Error("Aborted because "+c+" is not accepted"+L));break;case"accepted":e.onAccepted&&e.onAccepted(E),C=!0;break;case"disposed":e.onDisposed&&e.onDisposed(E),D=!0;break;default:throw new Error("Unexception type "+E.type)}if(M)return f("abort"),Promise.reject(M);if(C)for(c in y[c]=g[c],h(m,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,c)&&(p[c]||(p[c]=[]),h(p[c],E.outdatedDependencies[c]));D&&(h(m,[E.moduleId]),y[c]=w)}var _,j=[];for(r=0;r<m.length;r++)c=m[r],B[c]&&B[c].hot._selfAccepted&&j.push({module:c,errorHandler:B[c].hot._selfAccepted});f("dispose"),Object.keys(b).forEach(function(t){!1===b[t]&&function(t){delete installedChunks[t]}(t)});for(var O,S,k=m.slice();k.length>0;)if(c=k.pop(),s=B[c]){var A={},T=s.hot._disposeHandlers;for(i=0;i<T.length;i++)(n=T[i])(A);for(o[c]=A,s.hot.active=!1,delete B[c],delete p[c],i=0;i<s.children.length;i++){var R=B[s.children[i]];R&&((_=R.parents.indexOf(c))>=0&&R.parents.splice(_,1))}}for(c in p)if(Object.prototype.hasOwnProperty.call(p,c)&&(s=B[c]))for(S=p[c],i=0;i<S.length;i++)O=S[i],(_=s.children.indexOf(O))>=0&&s.children.splice(_,1);for(c in f("apply"),a=v,y)Object.prototype.hasOwnProperty.call(y,c)&&(t[c]=y[c]);var H=null;for(c in p)if(Object.prototype.hasOwnProperty.call(p,c)&&(s=B[c])){S=p[c];var U=[];for(r=0;r<S.length;r++)if(O=S[r],n=s.hot._acceptedDependencies[O]){if(-1!==U.indexOf(n))continue;U.push(n)}for(r=0;r<U.length;r++){n=U[r];try{n(S)}catch(t){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:c,dependencyId:S[r],error:t}),e.ignoreErrored||H||(H=t)}}}for(r=0;r<j.length;r++){var z=j[r];c=z.module,u=[c];try{P(c)}catch(t){if("function"==typeof z.errorHandler)try{z.errorHandler(t)}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:n,originalError:t}),e.ignoreErrored||H||(H=n),H||(H=t)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:c,error:t}),e.ignoreErrored||H||(H=t)}}return H?(f("fail"),Promise.reject(H)):(f("idle"),new Promise(function(t){t(m)}))}var B={};function P(e){if(B[e])return B[e].exports;var r=B[e]={i:e,l:!1,exports:{},hot:function(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(t,n){if(void 0===t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var r=0;r<t.length;r++)e._acceptedDependencies[t[r]]=n||function(){};else e._acceptedDependencies[t]=n||function(){}},decline:function(t){if(void 0===t)e._selfDeclined=!0;else if("object"==typeof t)for(var n=0;n<t.length;n++)e._declinedDependencies[t[n]]=!0;else e._declinedDependencies[t]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=e._disposeHandlers.indexOf(t);n>=0&&e._disposeHandlers.splice(n,1)},check:I,apply:C,status:function(t){if(!t)return d;l.push(t)},addStatusHandler:function(t){l.push(t)},removeStatusHandler:function(t){var e=l.indexOf(t);e>=0&&l.splice(e,1)},data:o[t]};return n=void 0,e}(e),parents:(s=u,u=[],s),children:[]};return t[e].call(r.exports,r,r.exports,c(e)),r.l=!0,r.exports}P.m=t,P.c=B,P.d=function(t,e,n){P.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},P.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},P.t=function(t,e){if(1&e&&(t=P(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(P.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)P.d(n,r,function(e){return t[e]}.bind(null,r));return n},P.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return P.d(e,"a",e),e},P.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},P.p="",P.h=function(){return a},c(13)(P.s=13)}([function(t,e,n){"use strict";function r(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}Object.defineProperty(e,"__esModule",{value:!0});var a={paramsExport:function(t){var e=this;""!==t&&this.log(t);for(var n=arguments.length,r=Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];r.forEach(function(t){e.log(t)})},log:function(t){console.log(t)}};e.default={fatal:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];a.paramsExport.apply(a,["【FATAL】"].concat(r(e)))},error:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];a.paramsExport.apply(a,["【ERROR】"].concat(r(e)))},warn:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];a.paramsExport.apply(a,["【WARN】"].concat(r(e)))},info:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];a.paramsExport.apply(a,[""].concat(r(e)))},debug:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];a.paramsExport.apply(a,[""].concat(r(e)))},trace:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];a.paramsExport.apply(a,[""].concat(r(e)))}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=c(n(19)),a=c(n(21)),i=c(n(24)),o=c(n(27)),u=c(n(11)),s=c(n(0));function c(t){return t&&t.__esModule?t:{default:t}}var l={init:function(){(0,r.default)();var t=(0,a.default)(),e=(0,i.default)(),n=(0,o.default)();s.default.info("[G] init all events listener [√]"),this.imgBox=document.getElementById("imgBox"),this.monitorList=[t,e,n],this.storage={data:null,width:null,height:null},s.default.info("[G] init Global storage [√]")},getColorData:function(){return{data:this.storage.compressedArray,width:this.storage.width,height:this.storage.height}},setColorData:function(t){arguments.length>1&&void 0!==arguments[1]&&arguments[1];var e=this.storage,n=e.width,r=e.height,a=u.default.convertArrayToCanvas(t,n,r),i=u.default.convertCanvasToBase64(a,"jpeg");s.default.info("[G] transform data into base64 [√]"),this.imgBox.setAttribute("src",i),s.default.info("[G] update DOM [√]")},update:function(){var t=u.default.convertImageToCanvas(this.imgBox),e=t.width,n=t.height,r=u.default.convertCanvasToImageData(t,0,0,e,n);s.default.info("[G] get imageData from DOM [√]");var a=u.default.decolorization(r),i=u.default.compressImageData(a);s.default.info("[G] decolor and compress imageData [√]"),this.storage=Object.freeze({imageData:r,decoloredImageData:a,compressedArray:i,width:e,height:n}),s.default.info("[G] update Global storage [√]"),this.monitorList.map(function(t){return t()}),s.default.info("[G] clear all local storage [√]")}};e.default=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=l(n(35)),a=l(n(36)),i=l(n(37)),o=l(n(38)),u=l(n(39)),s=l(n(40)),c=l(n(0));function l(t){return t&&t.__esModule?t:{default:t}}var d={init:function(t){var e=document.getElementById("imgBox"+t),n=(0,r.default)(t),l=(0,a.default)(),d=(0,i.default)(t),f=(0,o.default)();this.monitorList=[n,l,d,f],this.imgBox=(0,s.default)(e),c.default.info("[G] init all events listener [√]"),this.fsm=function(){var t={free:0,busy:1,error:2},e=t.free;return{isFree:function(){return e===t.free},wait:function(){if(e===t.free&&e!==t.error)return e=t.wait,this;throw new Error("cannot change state to busy")},free:function(){if(e===t.wait&&e!==t.error)return e=t.free,this;throw new Error("cannot change state to free")},error:function(){e=t.error}}}(),this.storage={imageData:null,decolorized:null},this.imageManager=(0,u.default)(),c.default.info("[G] init Global storage and stateMachine [√]")},setImageData:function(t,e){this.fsm.isFree()&&(this.fsm.wait(),this.imgBox.setImageData(t).adjustToParent(),this.update(t,e),this.fsm.free())},setBase64:function(t){var e=this;this.fsm.isFree()&&(this.fsm.wait(),this.imageManager.convertBase64ToImage(t).then(function(t){var n=e.imgBox.drawImage(t).adjustToParent().getImageData();e.update(n,null),e.fsm.free()}))},notify:function(){var t=this;this.monitorList.forEach(function(e){e(t.storage)})},update:function(t,e){this.storage.imageData=t||null,this.storage.decolorized=e||this.imageManager.decolorize(t),c.default.info("[G] Global storage update [√]"),this.notify(),c.default.info("[G] Global notify [√]")}};e.default=d},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var a=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},a=0;a<this.length;a++){var i=this[a][0];"number"==typeof i&&(r[i]=!0)}for(a=0;a<t.length;a++){var o=t[a];"number"==typeof o[0]&&r[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),e.push(o))}},e}},function(t,e,n){var r={},a=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),i=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),o=null,u=0,s=[],c=n(15);function l(t,e){for(var n=0;n<t.length;n++){var a=t[n],i=r[a.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](a.parts[o]);for(;o<a.parts.length;o++)i.parts.push(p(a.parts[o],e))}else{var u=[];for(o=0;o<a.parts.length;o++)u.push(p(a.parts[o],e));r[a.id]={id:a.id,refs:1,parts:u}}}}function d(t,e){for(var n=[],r={},a=0;a<t.length;a++){var i=t[a],o=e.base?i[0]+e.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[o]?r[o].parts.push(u):n.push(r[o]={id:o,parts:[u]})}return n}function f(t,e){var n=i(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),s.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=i(t.insertAt.before,n);n.insertBefore(e,a)}}function h(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=s.indexOf(t);e>=0&&s.splice(e,1)}function g(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return v(e,t.attrs),f(t,e),e}function v(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function p(t,e){var n,r,a,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var s=u++;n=o||(o=g(e)),r=y.bind(null,n,s,!1),a=y.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),f(t,e),e}(e),r=function(t,e,n){var r=n.css,a=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&a;(e.convertToAbsoluteUrls||i)&&(r=c(r));a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([r],{type:"text/css"}),u=t.href;t.href=URL.createObjectURL(o),u&&URL.revokeObjectURL(u)}.bind(null,n,e),a=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),a=function(){h(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else a()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return l(n,e),function(t){for(var a=[],i=0;i<n.length;i++){var o=n[i];(u=r[o.id]).refs--,a.push(u)}t&&l(d(t,e),e);for(i=0;i<a.length;i++){var u;if(0===(u=a[i]).refs){for(var s=0;s<u.parts.length;s++)u.parts[s]();delete r[u.id]}}}};var m=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function y(t,e,n,r){var a=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=m(e,a);else{var i=document.createTextNode(a),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(i,o[e]):t.appendChild(i)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=s(n(30)),a=s(n(31)),i=s(n(34)),o=s(n(10)),u=s(n(0));function s(t){return t&&t.__esModule?t:{default:t}}var c={init:function(){(0,r.default)();var t=(0,a.default)(),e=(0,i.default)();u.default.info("[G] init all events listener [√]"),this.imgBox=document.getElementById("imgBox2"),this.monitorList=[t,e],this.storage={data:null,width:null,height:null},u.default.info("[G] init Global storage [√]")},getColorData:function(){return{data:this.storage.compressedArray,width:this.storage.width,height:this.storage.height}},setColorData:function(t){var e=this,n=(arguments.length>1&&void 0!==arguments[1]&&arguments[1],this.storage),r=n.width,a=n.height,i=o.default.convertArrayToCanvas(t,r,a),u=o.default.convertCanvasToBase64(i,"jpeg");this.imgBox.onload=function(){e.update()},this.imgBox.src=u},update:function(){var t=o.default.convertImageToCanvas(this.imgBox),e=t.width,n=t.height,r=o.default.convertCanvasToImageData(t,0,0,e,n);u.default.info("[G] get imageData from DOM [√]");var a=o.default.decolorization(r),i=o.default.compressImageData(a);u.default.info("[G] decolor and compress imageData [√]"),this.storage=Object.freeze({imageData:r,decoloredImageData:a,compressedArray:i,width:e,height:n}),u.default.info("[G] update Global storage [√]")},notify:function(){this.monitorList.map(function(t){return t()})}};e.default=c},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,"body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nheader {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 500px;\r\n  padding: 30px 0 70px 0;\r\n  margin: 0 0 40px 0;\r\n  background-color: rgba(0, 0, 0, .04);\r\n}\r\n\r\nheader h1 {\r\n  margin-bottom: 10px;\r\n}\r\n\r\nheader p {\r\n  margin: 0;\r\n  font-size: .7rem;\r\n  letter-spacing: 3px;\r\n}\r\n\r\n.title {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.title img {\r\n  width: 1040px;\r\n}\r\n\r\n.exp {\r\n  min-width: 1000px;\r\n  margin-bottom: 160px;\r\n}\r\n\r\n.expBox {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.fileBox {\r\n  position: relative;\r\n  display: flex;\r\n  width: 450px;\r\n  height: 450px;\r\n  margin: 0 50px 0 -50px;\r\n  box-sizing: border-box;\r\n  border: 1px gray solid;\r\n  border-radius: 20px;\r\n}\r\n\r\n.fileBox input[type=file]{\r\n  opacity: 0;\r\n}\r\n\r\n.fileBox .inputBox {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.inputHelper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.inputHelper p {\r\n  font-size: .7rem;\r\n  line-height: .1rem;\r\n  color: rgba(0, 0, 0, .6);\r\n}\r\n\r\n.inputHelper p:first-of-type {\r\n  font-size: 1.5rem;\r\n  font-weight: 100;\r\n}\r\n\r\n.imgContainer {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 5%;\r\n  bottom: 5%;\r\n  left: 5%;\r\n  right: 5%;\r\n  z-index: -1;\r\n  background-color: rgba(0, 0, 0, .07);\r\n}\r\n\r\n.options button {\r\n  margin-left: 5px;\r\n}\r\n\r\n.options input {\r\n  margin-right: 5px;\r\n}\r\n\r\n.restore {\r\n  width: 120px;\r\n  height: 40px;\r\n  border-radius: 40px;\r\n  color: rgba(53, 33, 33, 0.8);\r\n  background-color: rgba(255, 160, 160, 0.5);\r\n}\r\n\r\n.restore:hover {\r\n  background-color: rgba(255, 160, 160, 0.6);\r\n}\r\n\r\n.imgBox {\r\n  image-rendering: pixelated;\r\n  image-rendering: -moz-crisp-edges;\r\n  image-rendering: crisp-edges;\r\n}\r\n\r\n#colorContainer {\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50px;\r\n  overflow: hidden;\r\n}\r\n\r\n#colorTest {\r\n  width: 100px;\r\n  height: 100px;\r\n  margin-left: 50px;\r\n  padding: 0;\r\n  border: transparent;\r\n}",""])},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,"\r\n#download, #restore {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 120px;\r\n  height: 40px;\r\n  margin-top: 40px;\r\n  border-radius: 40px;\r\n  text-decoration: none;\r\n  font-size: .7rem;\r\n}\r\n\r\n.roundBtn {\r\n  width: 24px;\r\n  height: 24px;\r\n  padding: 0;\r\n  margin-right: 5px;\r\n  border-radius: 100%;\r\n}\r\n\r\n.hide {\r\n  opacity: 0;\r\n}\r\n\r\n.annotation {\r\n  transform: scale(.8) translateX(-10%);\r\n  color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\nbutton {\r\n  margin: 0 0 0 2px;\r\n  padding: 5px 13px;\r\n  border: transparent;\r\n  border-radius: 13px;\r\n  outline: none;\r\n  background-color: rgba(0, 0, 0, .09);\r\n}\r\n\r\nbutton:hover {\r\n  background-color: rgba(0, 0, 0, .14);\r\n}\r\n\r\n#rename {\r\n  outline: none;\r\n  border: none;\r\n  border-bottom: 1px black solid;\r\n}\r\n\r\n.options {\r\n  margin-top: 20px;\r\n  font-size: .8rem;\r\n  color: rgba(0, 0, 0, 0.7);\r\n}\r\n\r\n.disable {\r\n  background-color: rgba(255, 160, 160, 0.685);\r\n}\r\n\r\n.enable {\r\n  background-color: rgba(193, 255, 241, 0.795);\r\n}",""])},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,"#histogramCanvas {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: rgb(100, 100, 100);\r\n}\r\n\r\n#curveCanvas {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n#step {\r\n  width: 40px;\r\n  outline: none;\r\n  border: none;\r\n  border-bottom: 1px black solid;\r\n  text-align: center;\r\n}\r\n\r\n#canvasContainer {\r\n  position: relative;\r\n  height: 250px;\r\n  margin: 10px 0 10px 60px;\r\n}\r\n\r\n.imageFusion {\r\n  margin-top: 10px;\r\n}\r\n\r\n#addImage, #subImage {\r\n  width: 270px;\r\n  overflow: hidden;\r\n}\r\n\r\n#titleExp2 img {\r\n  width: 950px;\r\n}\r\n\r\n#equalization {\r\n  background-color: rgba(153, 226, 245, 0.5);\r\n}",""])},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,".numberInput {\r\n  width: 26px;\r\n  outline: none;\r\n  text-align: center;\r\n  border: none;\r\n  border-bottom: 1px black solid;\r\n}\r\n\r\n#titleExp2plus img {\r\n  width: 870px;\r\n}",""])},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=document.createElement("canvas"),a=r.getContext("2d"),i={convertFileToBase64:function(t){return new Promise(function(e,n){var r=new FileReader(t);r.onload=function(t){var n=t.target.result;e(n)},r.onerror=function(t){n(t)},r.readAsDataURL(t)})},convertBase64ToImage:function(t){return new Promise(function(e,n){var r=new Image;r.onload=function(){e(r)},r.onerror=function(t){n(t)},r.src=t})},convertImageToCanvas:function(t){var e=document.createElement("canvas");return e.width=t.naturalWidth,e.height=t.naturalHeight,e.getContext("2d").drawImage(t,0,0),e},convertArrayToCanvas:function(t,e,n){r.width=e,r.height=n;for(var i=a.getImageData(0,0,e,n),o=0,u=e*n;o<u;o+=1)i.data[4*o]=t[o],i.data[4*o+1]=t[o],i.data[4*o+2]=t[o],i.data[4*o+3]=255;return a.putImageData(i,0,0),r},convertCanvasToBase64:function(t,e){var n="image/"+e;return t.toDataURL(n)},convertCanvasToImageData:function(t,e,n,r,a){return t.getContext("2d").getImageData(e,n,r,a)},createObjectURL:function(t){return window.URL.createObjectURL(t)},decolorization:function(t){for(var e=t.data,n=e.length,r=0;r<n;r+=4){var a=(e[r]+e[r+1]+e[r+2])/3;e[r]=a,e[r+1]=a,e[r+2]=a}return t},compressImageData:function(t){for(var e=t.data,n=e.length,r=[],a=0;a<n;a+=4)r.push(e[a]);return r}};e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,a=!1,i=void 0;try{for(var o,u=t[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(a)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=function(t){return t&&t.__esModule?t:{default:t}}(n(20));var i=["png","jpeg","bmp","dib"],o={isSupportedFile:function(t){if(!t)return!1;var e=t.type.split("/"),n=r(e,2),a=n[0],o=void 0===a?"unknown":a,u=n[1],s=void 0===u?"png":u;return"image"===o&&-1!==i.indexOf(s)},convertFileToBase64:function(t){return new Promise(function(e,n){var r=new FileReader(t);r.onload=function(t){var n=t.target.result;e(n)},r.onerror=function(t){n(t)},r.readAsDataURL(t)})},convertImageToCanvas:function(t){var e=document.createElement("canvas");return e.width=t.naturalWidth,e.height=t.naturalHeight,e.getContext("2d").drawImage(t,0,0),e},convertArrayToCanvas:function(t,e,n){var r=document.createElement("canvas"),a=r.getContext("2d");r.setAttribute("width",e),r.setAttribute("height",n);for(var i=0;i<n;i+=1)for(var o=0;o<e;o+=1){var u=i*e+o;a.fillStyle="rgb("+t[u]+","+t[u]+","+t[u]+")",a.fillRect(o,i,1,1)}return r},convertCanvasToBase64:function(t,e){var n="image/"+e;return"bmp"===e?a.default.convertCanvasToBase64(t):t.toDataURL(n)},convertCanvasToImageData:function(t,e,n,r,a){return t.getContext("2d").getImageData(e,n,r,a)},createObjectURL:function(t){return window.URL.createObjectURL(t)},decolorization:function(t){for(var e=t.data,n=e.length,r=0;r<n;r+=4){var a=(e[r]+e[r+1]+e[r+2])/3;e[r]=a,e[r+1]=a,e[r+2]=a}return t},compressImageData:function(t){for(var e=t.data,n=e.length,r=[],a=0;a<n;a+=4)r.push(e[a]);return r}};e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){var a=Object.create(r);return a.canvas=t,a.context=a.getContext(),a.width=e,a.height=n,a.init(e,n)};var r={init:function(t,e){return this.canvas.style.width=t,this.canvas.style.height=e,this.canvas.width=t,this.canvas.height=e,this},highResolution:function(){var t=this.context.backingStorePixelRatio||this.context.webkitBackingStorePixelRatio||this.context.mozBackingStorePixelRatio||this.context.msBackingStorePixelRatio||this.context.oBackingStorePixelRatio||this.context.backingStorePixelRatio||1,e=(window.devicePixelRatio||1)/t;return this.canvas.width=this.width*e,this.canvas.height=this.height*e,this.context.scale(e,e),this},getContext:function(){return this.canvas.getContext("2d")},getImageData:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.width,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.height;return this.context.getImageData(t,e,n,r)},getBase64:function(t){var e="image/"+t;return this.canvas.toDataURL(e)},setLineWidth:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return this.context.lineWidth=t,this},setFillStyle:function(t,e,n){var r="rgba("+t+", "+e+", "+n+", "+(arguments.length>3&&void 0!==arguments[3]?arguments[3]:255)+")";return this.context.fillStyle=r,this},setStrokeStyle:function(t,e,n){var r="rgba("+t+", "+e+", "+n+", "+(arguments.length>3&&void 0!==arguments[3]?arguments[3]:255)+")";return this.context.strokeStyle=r,this},drawPixel:function(t,e){return this.context.fillRect(t,e,1,1),this},drawSquare:function(t,e,n,r){return this.context.fillRect(t,e,n,r),this},drawLine:function(t,e,n,r){return this.context.beginPath(),this.context.moveTo(t,e),this.context.lineTo(n,r),this.context.stroke(),this.context.closePath(),this},drawCircle:function(t,e,n){return this.context.beginPath(),this.context.arc(t,e,n,0,2*Math.PI),this.context.fill(),this.context.closePath(),this},drawArray:function(t,e){var n=document.createElement("canvas"),r=n.getContext("2d");n.setAttribute("width",this.width),n.setAttribute("height",this.height);var a=r.getImageData(0,0,this.width,this.height);if(!0===e)for(var i=0,o=this.width*this.height;i<o;i+=1)a.data[4*i]=t[i],a.data[4*i+1]=t[i],a.data[4*i+2]=t[i],a.data[4*i+3]=255;else for(var u=0,s=a.data.length;u<s;u+=1)a.data[u]=t[u];return r.putImageData(a,0,0),this},empty:function(){return this.context.clearRect(0,0,this.width,this.height),this}}},function(t,e,n){"use strict";n(14),n(16),n(17),n(18);var r=o(n(1)),a=o(n(5)),i=o(n(2));function o(t){return t&&t.__esModule?t:{default:t}}window.onload=function(){r.default.init(),a.default.init(),i.default.init(3)}},function(t,e,n){var r=n(6);"string"==typeof r&&(r=[[t.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0},i=n(4)(r,a);r.locals&&(t.exports=r.locals),t.hot.accept(6,function(){var e=n(6);if("string"==typeof e&&(e=[[t.i,e,""]]),!function(t,e){var n,r=0;for(n in t){if(!e||t[n]!==e[n])return!1;r++}for(n in e)r--;return 0===r}(r.locals,e.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(e)}),t.hot.dispose(function(){i()})},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var a,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(a=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")})}},function(t,e,n){var r=n(7);"string"==typeof r&&(r=[[t.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0},i=n(4)(r,a);r.locals&&(t.exports=r.locals),t.hot.accept(7,function(){var e=n(7);if("string"==typeof e&&(e=[[t.i,e,""]]),!function(t,e){var n,r=0;for(n in t){if(!e||t[n]!==e[n])return!1;r++}for(n in e)r--;return 0===r}(r.locals,e.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(e)}),t.hot.dispose(function(){i()})},function(t,e,n){var r=n(8);"string"==typeof r&&(r=[[t.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0},i=n(4)(r,a);r.locals&&(t.exports=r.locals),t.hot.accept(8,function(){var e=n(8);if("string"==typeof e&&(e=[[t.i,e,""]]),!function(t,e){var n,r=0;for(n in t){if(!e||t[n]!==e[n])return!1;r++}for(n in e)r--;return 0===r}(r.locals,e.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(e)}),t.hot.dispose(function(){i()})},function(t,e,n){var r=n(9);"string"==typeof r&&(r=[[t.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0},i=n(4)(r,a);r.locals&&(t.exports=r.locals),t.hot.accept(9,function(){var e=n(9);if("string"==typeof e&&(e=[[t.i,e,""]]),!function(t,e){var n,r=0;for(n in t){if(!e||t[n]!==e[n])return!1;r++}for(n in e)r--;return 0===r}(r.locals,e.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(e)}),t.hot.dispose(function(){i()})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=document.getElementById("exp1"),e=document.getElementById("inputBox"),n=document.getElementById("formatSelection"),r=t.getElementsByTagName("input")[0],i=document.getElementById("rename"),o=document.getElementById("download");s.init(),r.addEventListener("change",function(t){if(s.state===u.wait){t.stopPropagation();var e=t.target,n=e.files;a.default.info("file changed by selecting."),s.validateAndDisplay(n[0])}}),e.addEventListener("dragover",function(t){t.stopPropagation(),t.preventDefault()}),e.addEventListener("drop",function(t){if(s.state===u.wait){t.stopPropagation(),t.preventDefault();var e=t.dataTransfer.files[0];a.default.info("file changed by dragging."),s.validateAndDisplay(e)}}),n.addEventListener("change",function(){var t=n[n.selectedIndex].value;"none"!==t&&s.convertImage(t)}),i.addEventListener("change",function(){if(s.state!==u.wait){var t=i.value;s.rename(t)}}),o.addEventListener("click",function(t){s.state===u.wait&&(t.stopPropagation(),t.preventDefault())})};var r=o(n(11)),a=o(n(0)),i=o(n(1));function o(t){return t&&t.__esModule?t:{default:t}}var u={wait:0,ready:1},s={init:function(){this.imgBox=document.getElementById("imgBox"),this.imgContainer=document.getElementById("imgContainer"),this.downloadBtn=document.getElementById("download"),this.inputHelper=document.getElementById("inputHelper"),this.nameInput=document.getElementById("rename"),Reflect.defineProperty(s,"state",{get:function(){return this._state},set:function(t){this._state=t,this.checkDownloadBtn(t)}}),this.state=u.wait},validateAndDisplay:function(t){var e=this;if(r.default.isSupportedFile(t)){var n=this.getElementStyle(this.imgContainer),o={width:n.width,height:n.height},u=r.default.createObjectURL(t),s=t.name;this.resizeImage(o,u).then(function(t){e.hideHelper(),e.setName(s),e.imgBox.setAttribute("width",t.width),e.imgBox.setAttribute("height",t.height),e.imgBox.setAttribute("src",u),i.default.update()})}else a.default.error("Please upload an image in supported format.")},convertImage:function(t){this.state=u.wait;var e=r.default.convertImageToCanvas(this.imgBox),n=r.default.convertCanvasToBase64(e,t);this.downloadBtn.setAttribute("href",n),a.default.info("convert file format to: "+t),this.state=u.ready},getElementStyle:function(t){return window.getComputedStyle?window.getComputedStyle(t):t.currentStyle},resizeImage:function(t,e){return new Promise(function(n,r){var i=new Image,o=parseInt(t.width,10),u=parseInt(t.height,10),s=null,c=null;i.onload=function(){o/u>i.naturalWidth/i.naturalHeight?(c=u,s=i.naturalWidth/(i.naturalHeight/c)):(s=o,c=i.naturalHeight/(i.naturalWidth/s)),a.default.info("image resized successfully. width: "+s+"px  height: "+c+"px"),n({width:s,height:c})},i.onerror=function(t){a.default.error("image resize failure."),r(t)},i.src=e})},hideHelper:function(){this.inputHelper.classList.add("hide")},setName:function(t){var e=t.split(".")[0];this.nameInput.value=e,this.downloadBtn.setAttribute("download",e),a.default.info("init file name to: "+e)},rename:function(t){this.downloadBtn.setAttribute("download",t),a.default.info("reset file name to: "+t)},getName:function(){return this.rename.value},checkDownloadBtn:function(t){t===u.ready?this.canDownload():t===u.wait&&this.cannotDownload()},canDownload:function(){this.downloadBtn.classList.remove("disable"),this.downloadBtn.classList.add("enable")},cannotDownload:function(){this.downloadBtn.classList.remove("enable"),this.downloadBtn.classList.add("disable")}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(0));var a={convertCanvasToImageData:function(t){var e=t.width,n=t.height;return t.getContext("2d").getImageData(0,0,e,n)},convertCanvasToBitMap:function(t){var e=t.width,n=t.height,r=e*n*3,a=r+54,i=[66,77,255&a,a>>8&255,a>>16&255,a>>24&255,0,0,0,0,54,0,0,0],o=[40,0,0,0,255&e,e>>8&255,e>>16&255,e>>24&255,255&n,n>>8&255,n>>16&255,n>>24&255,1,0,24,0,0,0,0,0,255&r,r>>8&255,r>>16&255,r>>24&255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],u=(4-3*e%4)%4,s=t.data,c="",l=e<<2,d=n,f=String.fromCharCode;do{for(var h=l*(d-1),g="",v=0;v<e;v+=1){var p=v<<2;g+=f(s[h+p+2])+f(s[h+p+1])+f(s[h+p])}for(var m=0;m<u;m+=1)g+=String.fromCharCode(0);c+=g,d-=1}while(d);var y=i.concat(o);return this.encodeData(y)+this.encodeData(c)},encodeData:function(t){window.btoa||r.default.error("btoa not defined");var e="";if("string"==typeof t)e=t;else for(var n=0;n<t.length;n+=1)e+=String.fromCharCode(t[n]);return window.btoa(e)},makeURI:function(t,e){return"data:"+e+";base64,"+t}},i={convertCanvasToBase64:function(t){var e=a.convertCanvasToImageData(t),n=a.convertCanvasToBitMap(e);return a.makeURI(n,"image/bmp")}};e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=document.getElementById("fft"),e=document.getElementById("ifft"),n=u.none,a=null;return t.addEventListener("click",function(){switch(n){case u.none:if(void 0===(a=r.default.getColorData()).data)break;case u.itrans:var t=s.fft(a);a.data=t,n=u.trans;break;case u.trans:alert("Please run ifft before running fft");break;case u.err:}}),e.addEventListener("click",function(){switch(n){case u.none:case u.itrans:alert("Please run fft before running ifft");break;case u.trans:var t=s.ifft(a);a.data=t,n=u.itrans;break;case u.err:}}),function(){n=u.none}};var r=o(n(1)),a=o(n(22)),i=o(n(0));function o(t){return t&&t.__esModule?t:{default:t}}var u={none:0,trans:1,itrans:2,err:3},s={zoom:function(t,e){var n=Math.max.apply(Math,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(t)),r=Math.log(.009*n+1);return t.map(function(t){var n=Math.log(.009*t+1);return Math.round(n*e/r)})},displace:function(t,e,n,r,a,i){var o=t.length/(a*i),u=e/a,s=n/i,c=[],l=[],d=function(t,n){var r=Math.floor(t/a),i=t-r*a,o=Math.floor(n/u);return(r*s+o)*e+(i*u+(n-o*u))};return r.forEach(function(t,e,n){-1!==t&&t!==e&&(c.push([e,t]),n[t]=-1)}),c.forEach(function(e){for(var n=e[0],r=e[1],a=0;a<o;a+=1){var i=d(n,a),u=d(r,a);l[i]=t[u],l[u]=t[i]}}),l},convertPluralToArray:function(t){return t.map(function(t){return t.magnitude2()})},fft:function(t){var e=t.data,n=t.width,o=t.height;i.default.info("","------- Start running fft2 -------");var u=a.default.fft2(e,n,o);i.default.info("calculate fft2 [√]");var c=s.convertPluralToArray(u),l=s.zoom(c,255);i.default.info("spectrum and zoom data [√]");var d=s.displace(l,n,o,[3,2,1,0],2,2);return i.default.info("mosaic image to center [√]"),r.default.setColorData(d,"tff"),i.default.info("-------- End running fft2 --------",""),u},ifft:function(t){var e=t.data,n=t.width,o=t.height;i.default.info("","------- Start running ifft2 -------");var u=a.default.ifft2(e,n,o);i.default.info("calculate ifft2 [√]");var s=a.default.regress(u,n,o);return i.default.info("regress data [√]"),r.default.setColorData(s,"ifft"),i.default.info("-------- End running ifft2 --------",""),s}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(23));var a=function(t,e,n,a,i,o){for(var u=[],s=0;s<n;s+=1){var c=t.slice(s*e,(s+1)*e);(o?r.default.ifft(c,a):r.default.fft(c)).forEach(function(t){return u.push(t)})}for(var l=u.length/n,d=0;d<l;d+=1){for(var f=[],h=0;h<n;h+=1)f.push(u[h*l+d]);for(var g=o?r.default.ifft(f,i):r.default.fft(f),v=g.length,p=0;p<v;p+=1)u[p*l+d]=g[p]}var m=a*n-a*i;return m>0&&u.splice(a*i,m),u};e.default={fft:r.default.fft,ifft:r.default.ifft,fft2:function(t,e,n){return a(t,e,n,0,0,!1)},ifft2:function(t,e,n){var i=r.default.completeLen(e),o=r.default.completeLen(n);return a(t,i,o,e,n,!0)},regress:function(t,e,n){var a=r.default.completeLen(e*n);return t.map(function(t){return t.regress(a)})}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=function t(e,n){var a=Object.create({mul:function(e){if("object"===(void 0===e?"undefined":r(e))){var n=this.real*e.real-this.imag*e.imag,a=this.real*e.imag+this.imag*e.real;return t(n,a)}return t(this.real*e,this.imag*e)},add:function(e){return t(this.real+e.real,this.imag+e.imag)},sub:function(e){return t(this.real-e.real,this.imag-e.imag)},magnitude:function(){return Math.pow(this.real,2)+Math.pow(this.imag,2)},magnitude2:function(){return Math.sqrt(this.magnitude())},conjugate:function(){return t(this.real,-this.imag)},regress:function(t){return this.real/t}});return a.real=e,a.imag=n,a},i={reverse:function(t){for(var e=t.length,n=Math.log(e)/Math.log(2),r=0,a=0,i=0;i<e;i+=1){r=i,a=0;for(var o=0;o<n;o+=1)a<<=1,a|=1&r,r>>=1;if(a>i){var u=[t[a],t[i]];t[i]=u[0],t[a]=u[1]}}return t},factorLut:function(t){if(!Reflect.has(this,"factorLut"+t)){for(var e=[],n=0;n<t;n+=1){var r=-n*Math.PI*2/t;e.push(a(Math.cos(r),Math.sin(r)))}this["factorLut"+t]=e}return this["factorLut"+t]},completeLen:function(t){var e=Math.log(t)/Math.log(2);return 1<<Math.ceil(e)},formatArray:function(t){for(var e=t.length,n=i.completeLen(e),o=[],u=0;u<e;u+=1)"object"===r(t[u])?o.push(t[u]):o.push(a(t[u],0));for(var s=e;s<n;s+=1)o.push(a(0,0));return o},butterfly:function(t){for(var e=t.length,n=Math.log(e)/Math.log(2),r=i.factorLut(e),a=i.reverse(t),o=0;o<n;o+=1)for(var u=2*(1<<o),s=0;s<e;s+=u)for(var c=0;c<u/2;c+=1){var l=s+c,d=s+c+u/2,f=a[d].mul(r[e/u*c]),h=a[l].add(f),g=a[l].sub(f);a[l]=h,a[d]=g}return a}};e.default={Complex:a,completeLen:i.completeLen,fft:function(t){var e=i.formatArray(t);return i.butterfly(e)},ifft:function(t,e){var n=t.map(function(t){return t.conjugate()});return(n=i.butterfly(n).map(function(t){return t.conjugate()})).slice(0,e)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=document.getElementById("dct"),e=document.getElementById("idct"),n=null,a=u.none;return t.addEventListener("click",function(){switch(a){case u.none:if(void 0===(n=r.default.getColorData()).data)break;case u.itrans:var t=s.dct(n);n.data=t,a=u.trans;break;case u.trans:alert("Please run idct before running dct");break;case u.err:}}),e.addEventListener("click",function(){switch(a){case u.none:case u.itrans:alert("Please run dct before running idct");break;case u.trans:var t=s.idct(n);n.data=t,a=u.itrans;break;case u.err:}}),function(){a=u.none}};var r=o(n(1)),a=o(n(25)),i=o(n(0));function o(t){return t&&t.__esModule?t:{default:t}}var u={none:0,trans:1,itrans:2,err:3},s={dct:function(t){var e=t.data,n=t.width,o=t.height;i.default.info("","------- Start running dct88 -------");var u=a.default.dct88(e,n,o);return i.default.info("calculate dct88 [√]"),r.default.setColorData(u,"dct"),i.default.info("-------- End running dct88 --------",""),u},idct:function(t){var e=t.data,n=t.width,o=t.height;i.default.info("","------- Start running idct88 -------");var u=a.default.idct88(e,n,o);return i.default.info("calculate idct88 [√]"),r.default.setColorData(u,"idct"),i.default.info("-------- End running idct88 --------",""),u}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(26));var a=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],i=function(t,e,n){for(var a=Math.ceil(e/8),i=a*Math.ceil(n/8),o=[],u=0;u<i;u+=1){for(var s=[],c=r.default.pos(u,a),l=c.x,d=c.y,f=0;f<64;f+=1){var h=r.default.pos(f,8),g=8*l+h.x,v=8*d+h.y;g>=e||v>=n?s.push(0):s.push(t[v*e+g])}o.push(s)}return o},o=function(t,e,n){var a=Math.ceil(e/8),i=[];return t.forEach(function(t,o){var u=r.default.pos(o,a),s=u.x,c=u.y;t.forEach(function(t,a){var o=r.default.pos(a,8),u=o.x,l=o.y;8*s+u<e&&8*c+l<n&&(i[(8*c+l)*e+(8*s+u)]=t)})}),i},u=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return t.map(function(t,n){return e*Math.round(t/a[n])})},s=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return t.map(function(t,n){return t*a[n]/e})};e.default={dct88:function(t,e,n){var a=i(t,e,n).map(function(t){return r.default.dct(t,8,8)}).map(function(t){return u(t,2)});return o(a,e,n)},idct88:function(t,e,n){var a=i(t,e,n).map(function(t){return s(t,2)}).map(function(t){return r.default.idct(t,8,8)});return o(a,e,n)},dct:r.default.dct,idct:r.default.idct}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r={cu:function(t,e){return 0===t&&0===e?.5:0===t||0===e?1/Math.sqrt(2):1},factorLut:function(t,e,n,r,a,i){var o=function(t,e,n){return Math.cos((t+.5)*e*Math.PI/n)};return o(n,a,t)*o(r,i,e)},pos:function(t,e){return{x:t%e,y:Math.floor(t/e)}},cal:function(t,e,n,a){var i=2/Math.sqrt(e*n);return t.map(function(o,u){var s=r.pos(u,e),c=s.x,l=s.y;return i*t.reduce(function(t,i,o){var u=r.pos(o,e),s=u.x,d=u.y;return!0===a?t+i*r.cu(s,d)*r.factorLut(e,n,c,l,s,d):t+i*r.cu(c,l)*r.factorLut(e,n,s,d,c,l)},0)})}};e.default={dct:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.length,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return r.cal(t,e,n,!1)},idct:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.length,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return r.cal(t,e,n,!0)},pos:r.pos}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=document.getElementById("wht"),e=document.getElementById("iwht"),n=document.getElementById("whtEnlarge"),a=document.getElementById("whtNarrow"),i=document.getElementById("whtScale"),o=null,c=255,l=u.none;return t.addEventListener("click",function(){switch(l){case u.none:if(void 0===(o=r.default.getColorData()).data)break;case u.itrans:var t=s.wht(o);s.whtZoom(t,255),o.data=t,l=u.trans;break;case u.trans:alert("Please run iwht before running wht");break;case u.err:}}),n.addEventListener("click",function(){switch(l){case u.none:alert("Please run wht before changing the scale value");break;case u.itrans:alert("Only available after running wht");break;case u.trans:s.whtZoom(o.data,c+=50),i.innerHTML=c;break;case u.err:}}),a.addEventListener("click",function(){switch(l){case u.none:alert("Please run wht before changing the scale value");break;case u.itrans:alert("Only available after running wht");break;case u.trans:s.whtZoom(o.data,c-=50),i.innerHTML=c;break;case u.err:}}),e.addEventListener("click",function(){switch(l){case u.none:case u.itrans:alert("Please run dct before running idct");break;case u.trans:var t=s.iwht();o=t,l=u.itrans;break;case u.err:}}),function(){l=u.none}};var r=o(n(1)),a=o(n(28)),i=o(n(0));function o(t){return t&&t.__esModule?t:{default:t}}var u={none:0,trans:1,itrans:2,err:3},s={zoom:function(t,e){var n=Math.max.apply(Math,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(t)),r=Math.log(.009*n+1);return t.map(function(t){var n=Math.log(.009*t+1);return Math.round(n*e/r)})},wht:function(t){var e=t.data,n=t.width,r=t.height;i.default.info("","------- Start running wht88 -------");var o=a.default.wht88(e,n,r);return i.default.info("calculate wht88 [√]"),i.default.info("-------- End running wht88 --------",""),o},whtZoom:function(t,e){var n=t.map(function(t){return t*e});r.default.setColorData(n,"wht"),i.default.info("scale and display zoomed by: "+e+" [√]")},iwht:function(){i.default.info("","------- Start running iwht88 -------");var t=r.default.getColorData().data;return r.default.setColorData(t,"iwht"),i.default.info("","------- Start running iwht88 -------"),t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(29));var a={pos:function(t,e){return{x:t%e,y:Math.floor(t/e)}},formatArray:function(t,e,n,r){for(var a=[],i=0,o=Math.pow(r,2);i<o;i+=1){var u=this.pos(i,r),s=u.x,c=u.y;s>=e||c>=n?a.push(0):a.push(t[c*e+s])}return a},iformatArray:function(t,e,n,r){for(var a=[],i=0,o=Math.pow(r,2);i<o;i+=1){var u=this.pos(i,r),s=u.x,c=u.y;s<e&&c<n&&a.push(t[i])}return a},completeLen:function(t){var e=Math.log(t)/Math.log(2);return 1<<Math.ceil(e)}};e.default={wht88:function(t,e,n){var i=a.completeLen(Math.max(e,n)),o=a.formatArray(t,e,n,i),u=r.default.wht2(o).map(function(t){return Math.abs(t)});return a.iformatArray(u,e,n,i)},wht:r.default.wht,wht2:r.default.wht2}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=[1,1,1,-1],a={pos:function(t,e){return{x:t%e,y:Math.floor(t/e)}},grayCode:function(t){return t^t>>1},hadamard:function(t){var e=this,n=[[0,0],[0,1],[1,0],[1,1]];return function t(a){if(1===a[0])return a;var i=Math.sqrt(a.length),o=2*i,u=[];return a.forEach(function(t,a){for(var s=e.pos(a,i),c=s.x,l=s.y,d=r.map(function(e){return e*t/2}),f=0,h=n.length;f<h;f+=1){var g=2*c+n[f][0],v=2*l+n[f][1];u[v*o+g]=d[f]}}),t(u)}([t])},matrixMul:function(t,e,n,r,a){for(var i=[],o=0;o<n;o+=1)for(var u=0;u<a;u+=1){for(var s=0,c=0;c<e;c+=1){s+=t[o*e+c]*r[c*a+u]}i.push(s)}return{value:i,width:a,height:n}}};e.default={wht:function(t){var e=t.length,n=a.hadamard(e);return a.matrixMul(n,e,e,t,1,e).value.map(function(e){return e/t.length})},wht2:function(t){var e=Math.sqrt(t.length),n=a.hadamard(e),r=a.matrixMul(n,e,e,t,e);return a.matrixMul(r.value,r.width,r.height,n,e).value.map(function(e){return e/t.length})},pos:a.pos}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=document.getElementById("exp2"),e=document.getElementById("inputBox2"),n=t.getElementsByTagName("input")[0];u.init(),n.addEventListener("change",function(t){t.stopPropagation();var e=t.target,n=e.files;a.default.info("file changed by selecting."),u.display(n[0])}),e.addEventListener("dragover",function(t){t.stopPropagation(),t.preventDefault()}),e.addEventListener("drop",function(t){t.stopPropagation(),t.preventDefault();var e=t.dataTransfer.files[0];a.default.info("file changed by dragging."),u.display(e)})};var r=o(n(10)),a=o(n(0)),i=o(n(5));function o(t){return t&&t.__esModule?t:{default:t}}var u={init:function(){this.imgBox=document.getElementById("imgBox2"),this.imgContainer=document.getElementById("imgContainer2"),this.inputHelper=document.getElementById("inputHelper2")},display:function(t){var e=this,n=this.getElementStyle(this.imgContainer),a={width:n.width,height:n.height},o=r.default.createObjectURL(t);this.resizeImage(a,o).then(function(t){e.hideHelper(),e.imgBox.setAttribute("width",t.width),e.imgBox.setAttribute("height",t.height),e.imgBox.setAttribute("src",o),i.default.update(),i.default.notify()})},getElementStyle:function(t){return window.getComputedStyle?window.getComputedStyle(t):t.currentStyle},resizeImage:function(t,e){return new Promise(function(n,r){var i=new Image,o=parseInt(t.width,10),u=parseInt(t.height,10),s=null,c=null;i.onload=function(){o/u>i.naturalWidth/i.naturalHeight?(c=u,s=i.naturalWidth/(i.naturalHeight/c)):(s=o,c=i.naturalHeight/(i.naturalWidth/s)),a.default.info("image resized successfully. width: "+s+"px  height: "+c+"px"),n({width:s,height:c})},i.onerror=function(t){a.default.error("image resize failure."),r(t)},i.src=e})},hideHelper:function(){this.inputHelper.classList.add("hide")}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=document.getElementById("equalization"),e=document.getElementById("reStep"),n=document.getElementById("trans"),o=document.getElementById("histogramCanvas"),d=document.getElementById("curveCanvas"),h=document.getElementById("step"),g=(0,a.default)(o,s,c),v=(0,r.default)(d,s,c);l.init(g,v,h);var p=null,m=[],y=-1,w=0,b=!1,x=!1;return t.addEventListener("click",function(){if(null!==p){var t=g.equalize(p.data.length);f(t)}}),e.addEventListener("click",function(){if(null!==p){var t=h.value||256;l.resetController(x);var e=g.setStep(t).initHistogram(p.data);g.drawHistogram(e),i.default.setColorData(p.data,"jpeg")}}),n.addEventListener("click",function(){null!==p&&(x=!x,l.updateController(x).updateHistogram(p.data,x).updateImage())}),d.addEventListener("mousedown",function(t){if(null!==p){var e=t.layerX,n=t.layerY,r=t.button,a=[e,n];if(!0===x)y=1,m=a,b=!0,v.moveCurvePoint(y,a,!0);else{var i=v.getClosestPoint(a);0===r&&-1===i?w<u&&(y=v.addLinePoint(a,!0),w+=1,m=a,b=!0):0===r&&-1!==i?(y=i,m=a,b=!0):2===r&&-1!==i&&(v.removeLinePoint(i,!0),w-=1)}}}),d.addEventListener("mousemove",function(t){if(null!==p&&!0===b&&0===t.button){var e=[t.layerX,t.layerY],n=m[0]-e[0],r=m[1]-e[1],a=m[0]-n,i=m[1]-r;!0===v.isBorder(y,[a,i],x)&&(!0===x?v.moveCurvePoint(y,[a,i],!0):v.moveLinePoint(y,[a,i],!0))}}),d.addEventListener("mouseup",function(){null!==p&&(b=!1,l.updateHistogram(p.data,x).updateImage())}),d.addEventListener("mouseleave",function(){null!==p&&(b=!1,l.updateHistogram(p.data,x).updateImage())}),d.addEventListener("contextmenu",function(t){b=!1,t.preventDefault()}),function(){p=i.default.getColorData();var t=h.value||256;l.resetController(x);var e=g.setStep(t).initHistogram(p.data);g.drawHistogram(e)}};var r=o(n(32)),a=o(n(33)),i=o(n(5));function o(t){return t&&t.__esModule?t:{default:t}}var u=5,s=256,c=256,l={init:function(t,e,n){return t.canvas.setFillStyle(160,160,160),e.canvas.setFillStyle(255,255,255).setStrokeStyle(255,255,255),e.setRadius(3),this.stepInput=n,this.myHistogram=t,this.myController=e,this},resetController:function(t){return this.myController.reset(t),this},updateController:function(t){return!0===t?l.changeToCurve():l.changeToLine(),this},changeToLine:function(){return this.myController.empty().drawLine(),this},changeToCurve:function(){return this.myController.empty().drawCurve(),this},getHistogram:function(){return this.myHistogram.getHistogram()},updateHistogram:function(t,e){this.mappedData=!0===e?this.myController.mapCurve(t):this.myController.mapLine(t);var n=this.myHistogram.initHistogram(this.mappedData);return this.myHistogram.drawHistogram(n),this},updateImage:function(){return i.default.setColorData(this.mappedData,"jpeg"),this}},d=function t(e,n,r){var a=[];if(e.forEach(function(t,e){null!==t&&void 0!==t&&a.push(e)}),0!==a.length)if(1!==a.length){if(2===a.length)return r[a[0]]=n+"1",void(r[a[1]]=n+"0");for(var i=function(t){for(var e=function(t){return t.reduce(function(t,e){return null!==e?t+e:t},0)}(t),n=0,r=e,a=-1,i=0;i<t.length;i+=1)if(null!==t[i]){var o=e-(n+=t[i]),u=Math.abs(n-o);u<r&&(r=u,a=i)}return a}(e),o=[],u=[],s=0;s<=i;s+=1)o[s]=e[s]?e[s]:null,u[s]=null;for(var c=i+1;c<e.length;c+=1)u[c]=e[c];t(o,n+"1",r),t(u,n+"0",r)}else r[a[0]]=n},f=function(t){var e={};console.log(""),console.log("原始数组："),t.forEach(function(t,e){null!==t&&void 0!==t&&console.log("色阶： "+e+"   拥有像素点： "+t+" 个")}),console.log(""),d(t,"",e),console.log("计算后数组："),Object.keys(e).forEach(function(t){console.log("色阶： "+t+"   的编码为： "+e[t])}),console.log(""),alert("按下F12 查看编码前后的信息")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,a=!1,i=void 0;try{for(var o,u=t[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(a)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();e.default=function(t,e,n){var r=Object.create(o),u=(0,a.default)(t,e,n);return r.canvas=u,r.width=e,r.height=n,r.radius=i,r.isCurve=!1,r.linePoints=[[0,n],[e,0]],r.curvePoints=[[0,n],[e/2,n/2],[e,0]],r.init()};var a=function(t){return t&&t.__esModule?t:{default:t}}(n(12));var i=3,o={init:function(){return this},getDistance:function(t,e){var n=r(t,2),a=n[0],i=n[1],o=r(e,2),u=o[0],s=o[1];return Math.sqrt(Math.pow(a-u,2)+Math.pow(i-s,2))},getClosestPoint:function(t){var e=this,n=this.linePoints.map(function(n){return e.getDistance(t,n)}),r=Math.min.apply(Math,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(n)),a=n.indexOf(r),i=this.linePoints.length;return r>15||0===a||a===i-1?-1:a},getCurveFunction:function(t){var e=this,n=r(t,2),a=n[0],i=n[1],o=Math.pow(Math.E,Math.log(a/this.width)/(i/this.height-1));return function(t){var n=Math.log(t/e.width)/Math.log(o)+1;return n>=0?n*e.height:0}},getTransCoordinate:function(t){var e=r(t,2),n=e[0],a=e[1];return[n,this.height-a]},setRadius:function(t){this.radius=t},mapFunction:function(t,e){return t.map(function(t){return e(t)})},mapLine:function(t){var e=this,n=this.linePoints.map(function(t){return e.getTransCoordinate(t)});return t.map(function(t){for(var e=0,r=0,a=n.length;r<a;r+=1)if(t<n[r][0]){var i=n[r-1],o=n[r],u=(o[1]-i[1])/(o[0]-i[0]);e=(t-i[0])*u+i[1];break}return e})},mapCurve:function(t){var e=this.curvePoints[1],n=this.getTransCoordinate(e),r=this.getCurveFunction(n);return this.mapFunction(t,r)},drawLine:function(){for(var t=this.linePoints,e=0,n=t.length-1;e<n;e+=1)this.canvas.drawLine(t[e][0],t[e][1],t[e+1][0],t[e+1][1]),e<n-1&&this.canvas.drawCircle(t[e+1][0],t[e+1][1],this.radius);return this},drawCurve:function(){for(var t=this.curvePoints[1],e=this.getTransCoordinate(t),n=this.getCurveFunction(e),a=0;a<this.width;a+=1){var i=this.getTransCoordinate([a,n(a)]),o=r(i,2),u=o[0],s=o[1];this.canvas.drawPixel(u,s)}return this.canvas.drawCircle(t[0],t[1],this.radius),this},addLinePoint:function(t,e){for(var n=-1,r=0,a=this.linePoints.length;r<a;r+=1)if(t[0]<this.linePoints[r][0]){this.linePoints.splice(r,0,t),n=r;break}return!0===e&&(this.empty(),this.drawLine()),n},removeLinePoint:function(t,e){var n=this.linePoints.splice(t,1);return!0===e&&(this.empty(),this.drawLine()),n},moveLinePoint:function(t,e,n){return this.linePoints[t]=e,!0===n&&(this.empty(),this.drawLine()),this},moveCurvePoint:function(t,e,n){return this.curvePoints[t]=e,!0===n&&(this.empty(),this.drawCurve()),this},isBorder:function(t,e,n){var r=n?this.curvePoints[t-1][0]:this.linePoints[t-1][0],a=n?this.curvePoints[t+1][0]:this.linePoints[t+1][0];return e[0]>r&&e[0]<a},empty:function(){return this.canvas.empty(),this},resetLinePoints:function(){return this.linePoints=[[0,this.height],[this.width,0]],this},resetCurvePoints:function(){return this.curvePoints=[[0,this.height],[this.width/2,this.height/2],[this.width,0]],this},reset:function(t){return this.empty().resetCurvePoints().resetLinePoints(),!0===t?this.drawCurve():this.drawLine(),this}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){var o=Object.create(i),u=(0,r.default)(t,e,n);return o.canvas=u,o.width=e,o.height=n,o.step=a,o.histogram=[],o.init()};var r=function(t){return t&&t.__esModule?t:{default:t}}(n(12));var a=256,i={init:function(){return this},initHistogram:function(t){for(var e=new Array(Number(this.step)).fill(0),n=a/this.step,r=0,i=t.length;r<i;r+=1){e[Math.floor(t[r]/n)]+=1}return e},getHistogram:function(){return this.histogram},setStep:function(t){return this.step=t,this},setHistogram:function(t){return this.histogram=t.slice(0),this},drawHistogram:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.8,n=t.length,r=Math.round(Math.max.apply(Math,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(t))/e),a=this.width/n;this.canvas.empty(),this.setHistogram(t);for(var i=0;i<n-1;i+=1){var o=Math.round(t[i]*this.height/r),u=i*a,s=this.height-o;this.canvas.drawSquare(u,s,a,o)}return this},equalize:function(t){var e=this,n=[this.histogram[0]];return this.histogram.reduce(function(t,e){var r=t+e;return n.push(r),r}),n.map(function(n){return Math.round(n/t*(e.step-1))})},mapEqualize:function(t,e){return t.map(function(t){return e[t]})},empty:function(){return this.canvas.empty(),this}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=document.getElementById("addImage"),e=document.getElementById("subImage"),n=document.getElementById("add"),o=document.getElementById("sub"),s={addImage:null,subImage:null},c=null;return t.addEventListener("change",function(t){t.stopPropagation();var e=t.target.files;r.default.convertFileToBase64(e[0]).then(function(t){return r.default.convertBase64ToImage(t)}).then(function(t){s.addImage=t,i.default.info("add image ready")})}),e.addEventListener("change",function(t){t.stopPropagation();var e=t.target.files;r.default.convertFileToBase64(e[0]).then(function(t){return r.default.convertBase64ToImage(t)}).then(function(t){s.subImage=t,i.default.info("sub image ready")})}),n.addEventListener("click",function(){if(null!==s.addImage&&null!==c){var t=u.add(c,s.addImage);a.default.setColorData(t),a.default.update(),a.default.notify(),s.addImage=null}}),o.addEventListener("click",function(){if(null!==s.subImage&&null!==c){var t=u.sub(c,s.subImage);a.default.setColorData(t),a.default.update(),a.default.notify(),s.subImage=null}}),function(){c=a.default.getColorData()}};var r=o(n(10)),a=o(n(5)),i=o(n(0));function o(t){return t&&t.__esModule?t:{default:t}}var u={resize:function(t,e){var n=t.width,r=t.height,a=e.width,i=e.height,o=0,u=0,s=0,c=0;n/r>a/i?(s=a,o=0,u=(i-(c=r/(n/a)))/2):(c=i,o=(a-(s=n/(r/i)))/2,u=0);return{sx:o,sy:u,swidth:s,sheight:c}},cut:function(t,e,n){var r=n.sx,a=n.sy,i=n.swidth,o=n.sheight,u=t.width,s=t.height,c=document.createElement("canvas"),l=c.getContext("2d");return c.width=u,c.height=s,l.drawImage(e,r,a,i,o,0,0,u,s),l.getImageData(0,0,u,s)},add:function(t,e){var n=this.resize(t,e),a=this.cut(t,e,n),i=r.default.decolorization(a),o=r.default.compressImageData(i);return t.data.map(function(t,e){return t/2+o[e]/2})},sub:function(t,e){var n=this.resize(t,e),a=this.cut(t,e,n),i=r.default.decolorization(a),o=r.default.compressImageData(i);return t.data.map(function(t,e){return 2*t-o[e]})}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,a=!1,i=void 0;try{for(var o,u=t[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(a)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();e.default=function(t){var e=document,n=e.getElementById("inputBox"+t),i=e.getElementById("exp"+t).getElementsByTagName("input")[0],o=e.getElementById("inputHelper"+t),s=e.getElementById("restore"+t),c={file:null};return i.addEventListener("change",function(t){var e=t.target.files;a.default.info("file changed by selecting.");var n=r(e,1);c.file=n[0],u.display(e[0]),u.hideHelper(o)}),n.addEventListener("dragover",function(t){t.preventDefault(),t.stopPropagation()}),n.addEventListener("drop",function(t){t.preventDefault(),t.stopPropagation();var e=t.dataTransfer.files[0];a.default.info("file changed by dragging."),c.file=e,u.display(e),null===c.file&&u.hideHelper(o)}),s.addEventListener("click",function(){null!==c&&u.display(c.file)}),function(){}};var a=o(n(0)),i=o(n(2));function o(t){return t&&t.__esModule?t:{default:t}}var u={display:function(t){var e=window.URL.createObjectURL(t);return i.default.setBase64(e),this},hideHelper:function(t){return t.classList.add("hide"),this}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=document.getElementById("average"),e=document.getElementById("median"),n=document.getElementById("averageTemp"),i=document.getElementById("medianTemp"),o=null;return t.addEventListener("click",function(){var t=u.turnOdd(n.value||3),e=u.average(o.imageData,t);a.default.setImageData(e,e)}),e.addEventListener("click",function(){var t=u.turnOdd(i.value||3),e=u.median(o.imageData,t);a.default.setImageData(e,e)}),function(t){o={imageData:t.decolorized},r.default.info("filter local storage update [√]")}};var r=i(n(0)),a=i(n(2));function i(t){return t&&t.__esModule?t:{default:t}}var o=function(t,e){var n=document.createElement("canvas").getContext("2d");return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return n.createImageData(t,e)}}(),u={pos:function(t,e){return{x:t%e,y:Math.floor(t/e)}},filter:function(t,e,n){for(var r=t.data,a=t.width,i=t.height,u=o(a,i),s=0,c=r.length/4;s<c;s+=1){for(var l=this.pos(s,a),d=l.x,f=l.y,h=-(e-1)/2,g=-h,v=[],p=h;p<=g;p+=1)for(var m=h;m<=g;m+=1){var y=d+m,w=f+p;if(y>=0&&y<a&&w>=0&&w<i){var b=r[4*(w*a+y)];v.push(b)}}var x=0;if("average"===n)x=v.reduce(function(t,e){return t+e})/v.length;else if("median"===n){var I=v.sort();x=I.length%2==1?I[(v.length-1)/2]:I[v.length/2]}u.data[4*s]=x,u.data[4*s+1]=x,u.data[4*s+2]=x,u.data[4*s+3]=r[4*s+3]}return u},average:function(t,e){return this.filter(t,e,"average")},median:function(t,e){return this.filter(t,e,"median")},turnOdd:function(t){return Math.abs(t%2==1?t:t-1)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=document.getElementById("peppersalt"),e=document.getElementById("gaussian"),n=document.getElementById("snr"),i=document.getElementById("mu"),u=document.getElementById("sigma"),s=document.getElementById("k"),c=null;return t.addEventListener("click",function(){var e=n.value||.9,r=o.peppersalt(c.imageData,e);a.default.setImageData(r,t)}),e.addEventListener("click",function(){var t=i.value||0,n=u.value||1,r=s.value||128,l=o.gaussian(c.imageData,t,n,r);a.default.setImageData(l,e)}),function(t){c={imageData:t.decolorized},r.default.info("filter local storage update [√]")}};var r=i(n(0)),a=i(n(2));function i(t){return t&&t.__esModule?t:{default:t}}var o={pos:function(t,e){return{x:t%e,y:Math.floor(t/e)}},peppersalt:function(t,e){for(var n=t.data,r=t.width,a=t.height,i=r*a*(1-e),o=0;o<i;o+=1){var u=Math.floor(Math.random()*r),s=Math.floor(Math.random()*a)*r+u;0===Math.round(Math.random())?(n[4*s]=0,n[4*s+1]=0,n[4*s+2]=0):(n[4*s]=255,n[4*s+1]=255,n[4*s+2]=255)}return t},distribution:function(){var t=0,e=0,n=0;do{n=(t=2*Math.random()-1)*t+(e=2*Math.random()-1)*e}while(0===n||n>=1);return t*Math.sqrt(-2*Math.log(n)/n)},gaussianGenerator:function(t,e){return t+e*this.distribution()},gaussian:function(t,e,n,r){for(var a=t.data,i=t.width,o=t.height,u=0;u<o;u+=1)for(var s=0;s<i;s+=1){var c=i*u+s,l=r*this.gaussianGenerator(e,n),d=a[4*c]+l;d>255&&(d=255),d<0&&(d=0),a[4*c]=d,a[4*c+1]=d,a[4*c+2]=d}return t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,a=!1,i=void 0;try{for(var o,u=t[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(a)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();e.default=function(){var t=document.getElementById("roberts"),e=(document.getElementById("robertsInput"),document.getElementById("laplacian")),n=document.getElementById("iterativeThresholding"),r=document.getElementById("regionGrowing"),o=document.getElementById("inputBox3"),u=document.getElementById("imgContainer3").getBoundingClientRect(),c=o.getBoundingClientRect(),l=u.left-c.left,d=u.top-c.top,f=null;return t.addEventListener("click",function(){var t=s.robert(f.imageData);console.log(t),i.default.setImageData(t,t)}),e.addEventListener("click",function(){var t=s.laplacian(f.imageData);console.log(t),i.default.setImageData(t,t)}),n.addEventListener("click",function(){var t=s.iterativeThresholding(f.imageData);console.log(t),i.default.setImageData(t,t)}),r.addEventListener("click",function(){alert("按住 Ctrl 同时左键点击图片选择生长点")}),o.addEventListener("click",function(t){var e=t.ctrlKey,n=t.layerX,r=t.layerY;if(!0===e){var a=function(){var t=f.imageData,e=t.width,n=t.height;return e>n?u.width/e:u.height/n}(),o=n-l,c=r-d,h=s.runRegionGrowingOnPoint(o,c,20,a,f.imageData);console.log(h),i.default.setImageData(h,h)}}),function(t){f={imageData:t.decolorized},a.default.info("filter local storage update [√]")}};var a=o(n(0)),i=o(n(2));function o(t){return t&&t.__esModule?t:{default:t}}var u=function(t,e){var n=document.createElement("canvas").getContext("2d");return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return n.createImageData(t,e)}}(),s={pos:function(t,e){return{x:t%e,y:Math.floor(t/e)}},robert:function(t){for(var e=t.data,n=t.width,r=t.height,a=u(n,r),i=1;i<n-1;i+=1)for(var o=1;o<r-1;o+=1){var s=o*n+i,c=(o-1)*n+i,l=o*n+i-1,d=(o-1)*n+i-1,f=e[4*s],h=e[4*c],g=e[4*l],v=e[4*d],p=Math.abs(f-v)+Math.abs(h-g);a.data[4*s]=p,a.data[4*s+1]=p,a.data[4*s+2]=p,a.data[4*s+3]=255}return a},laplacian:function(t){for(var e=t.data,n=t.width,r=t.height,a=u(n,r),i=1;i<n-1;i+=1)for(var o=1;o<r-1;o+=1){var s=o*n+i,c=(o-1)*n+i,l=(o+1)*n+i,d=o*n+i-1,f=o*n+i+1,h=e[4*s],g=e[4*c],v=e[4*l],p=e[4*d]+e[4*f]+g+v-4*h;a.data[4*s]=p,a.data[4*s+1]=p,a.data[4*s+2]=p,a.data[4*s+3]=255}return a},getHistogram:function(t){for(var e=new Array(Number(256)).fill(0),n=0,r=t.length;n<r;n+=1){e[Math.floor(t[n])]+=1}return e},calcThreshold:function(t,e){for(var n=0,r=0,a=0,i=0,o=0;o<e;o+=1)n+=o*t[o],r+=t[o];for(var u=e+1;u<t.length;u+=1)a+=u*t[u],i+=t[u];var s=n/(r=0===r?1:r)+a/(i=0===i?1:i);return Math.round(s/2)},getThreshold:function(t){for(var e=this.getHistogram(t),n=128,r=-1;n!==r;)n=r,r=this.calcThreshold(e,n);return r},iterativeThresholding:function(t){for(var e=t.data,n=t.width,r=t.height,a=u(n,r),i=this.getThreshold(e),o=0;o<n*r*4;o+=4){var s=0;e[o]>=i&&(s=e[o]),a.data[o]=s,a.data[o+1]=s,a.data[o+2]=s,a.data[o+3]=255}return a},regionGrowing:function(t,e,n){var a=r(e,2),i=a[0],o=a[1],s=t.data,c=t.width,l=t.height,d=4*(o*c+i),f=s[d],h=u(c,l);h.data[d]=s[d],h.data[d+1]=s[d+1],h.data[d+2]=s[d+2],h.data[d+3]=s[d+3];return function t(e,a){var i=[],o=0;[[e-1,a],[e+1,a],[e,a+1],[e,a-1]].forEach(function(t){var e=r(t,2),a=e[0],o=e[1],u=4*(o*c+a);if(0===h.data[u+3]){var l=s[u];Math.abs(f-l)<n&&(i.push([a,o]),h.data[u]=s[u],h.data[u+1]=s[u+1],h.data[u+2]=s[u+2],h.data[u+3]=s[u+3])}}),i.forEach(function(t){var e=r(t,2),n=e[0],a=e[1];o+=s[4*(a*c+n)]}),f=(f+o)/(i.length+1),i.forEach(function(e){var n=r(e,2),a=n[0],i=n[1];t(a,i)})}(i,o),h},runRegionGrowingOnPoint:function(t,e,n,r,a){var i=Math.floor(t/r),o=Math.floor(e/r);return console.log(i,o),this.regionGrowing(a,[i,o],n)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.default=function(){var t=Object.create(a);return t.decolorize=function(e){for(var n=e.data,r=e.width,a=e.height,i=t.assemblePixelData(n.length),o=0,u=n.length;o<u;o+=4){var s=(n[o]+n[o+1]+n[o+2])/3;i[o]=s,i[o+1]=s,i[o+2]=s,i[o+3]=n[o+3]}return t.assembleImageData(i,r,a)},t};var a={convertFileToBase64:function(t){return new Promise(function(e,n){var r=new FileReader(t);r.onload=function(t){var n=t.target.result;e(n)},r.onerror=function(t){n(t)},r.readAsDataURL(t)})},convertFileToObjectURL:function(t){var e=window.URL.createObjectURL(t);return Promise.resolve(e)},convertBase64ToImage:function(t){return new Promise(function(e,n){var r=new Image;r.onload=function(){e(r)},r.onerror=function(t){n(t)},r.src=t})},convertImageToBase64:function(t){var e=this;return this.convertImageToCanvas(t).then(function(t){return e.convertCanvasToBase64(t)})},convertImageToCanvas:function(t){var e=document.createElement("canvas");return e.width=t.naturalWidth,e.height=t.naturalHeight,e.getContext("2d").drawImage(t,0,0),Promise.resolve(e)},convertCanvasToImage:function(t){var e=this;return this.convertCanvasToBase64(t).then(function(t){return e.convertBase64ToImage(t)})},convertCanvasToBase64:function(t,e){var n="image/"+e,r=t.toDataURL(n);return Promise.resolve(r)},convertBase64ToCanvas:function(t){var e=this;return this.convertBase64ToImage(t).then(function(t){return e.convertImageToCanvas(t)})},assembleImageData:function(t,e,n){return"object"===("undefined"==typeof window?"undefined":r(window))?new window.ImageData(t,e,n):{data:t,width:e,height:n}},assemblePixelData:function(t){return new Uint8ClampedArray(t)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=Object.create(r);return a.canvas=t,a.context=a.getContext2d(),a.parentStyle=window.getComputedStyle(t.parentNode),a.width=e,a.height=n,a.init(e,n)};var r={init:function(t,e){return this.resize(t,e)},highResolution:function(){var t=this.context.backingStorePixelRatio||this.context.webkitBackingStorePixelRatio||this.context.mozBackingStorePixelRatio||this.context.msBackingStorePixelRatio||this.context.oBackingStorePixelRatio||this.context.backingStorePixelRatio||1,e=(window.devicePixelRatio||1)/t;return this.canvas.width=this.width*e,this.canvas.height=this.height*e,this.context.scale(e,e),this},resize:function(t,e){return this.width=t,this.height=e,this.canvas.style.width=t+"px",this.canvas.style.height=e+"px",this.canvas.width=t,this.canvas.height=e,this},adjustToParent:function(){var t=parseInt(this.parentStyle.width,10),e=parseInt(this.parentStyle.height,10),n=1;return n=t/e>this.width/this.height?e/this.height:t/this.width,this.canvas.style.width=this.width*n+"px",this.canvas.style.height=this.height*n+"px",this},getContext2d:function(){return this.canvas.getContext("2d")},getContext3d:function(){return this.canvas.getContext("3d")},getImageData:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.width,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.height;return this.context.getImageData(t,e,n,r)},getBase64:function(t){var e="image/"+t;return this.canvas.toDataURL(e)},setLineWidth:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return this.context.lineWidth=t,this},setFillStyle:function(t,e,n){var r="rgba("+t+", "+e+", "+n+", "+(arguments.length>3&&void 0!==arguments[3]?arguments[3]:255)+")";return this.context.fillStyle=r,this},setStrokeStyle:function(t,e,n){var r="rgba("+t+", "+e+", "+n+", "+(arguments.length>3&&void 0!==arguments[3]?arguments[3]:255)+")";return this.context.strokeStyle=r,this},setImageData:function(t){var e=t.width,n=t.height;return this.resize(e,n),this.context.putImageData(t,0,0),this},drawPixel:function(t,e){return this.context.fillRect(t,e,1,1),this},drawSquare:function(t,e,n,r){return this.context.fillRect(t,e,n,r),this},drawLine:function(t,e,n,r){return this.context.beginPath(),this.context.moveTo(t,e),this.context.lineTo(n,r),this.context.stroke(),this.context.closePath(),this},drawCircle:function(t,e,n){return this.context.beginPath(),this.context.arc(t,e,n,0,2*Math.PI),this.context.fill(),this.context.closePath(),this},drawImage:function(t){var e=t.width,n=t.height;return this.resize(e,n),this.context.drawImage(t,0,0,e,n),this},empty:function(){return this.context.clearRect(0,0,this.width,this.height),this}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,